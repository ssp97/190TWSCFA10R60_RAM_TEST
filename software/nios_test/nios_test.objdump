
nios_test.elf:     file format elf32-littlenios2
nios_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000020

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00001ed4 memsz 0x00001ee4 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  10000020  10000020  00002ef4  2**0
                  CONTENTS
  2 .text         00001b5c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000a4  10001b7c  10001b7c  00002b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d4  10001c20  10001c20  00002c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  10001ef4  10001ef4  00002ef4  2**2
                  ALLOC, SMALL_DATA
  6 .epcs_flash_controller_0 00000000  00000000  00000000  00002ef4  2**0
                  CONTENTS
  7 .ram          00000000  10001f04  10001f04  00002ef4  2**0
                  CONTENTS
  8 .sdram_0      00000000  20000000  20000000  00002ef4  2**0
                  CONTENTS
  9 .sdram_1      00000000  20800000  20800000  00002ef4  2**0
                  CONTENTS
 10 .comment      00000023  00000000  00000000  00002ef4  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000448  00000000  00000000  00002f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0000648a  00000000  00000000  00003360  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000206d  00000000  00000000  000097ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000240d  00000000  00000000  0000b857  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000089c  00000000  00000000  0000dc64  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001411  00000000  00000000  0000e500  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00001193  00000000  00000000  0000f911  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_alt_sim_info 00000020  00000000  00000000  00010aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 000001c8  00000000  00000000  00010ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .thread_model 00000003  00000000  00000000  000123aa  2**0
                  CONTENTS, READONLY
 21 .cpu          00000005  00000000  00000000  000123ad  2**0
                  CONTENTS, READONLY
 22 .qsys         00000001  00000000  00000000  000123b2  2**0
                  CONTENTS, READONLY
 23 .simulation_enabled 00000001  00000000  00000000  000123b3  2**0
                  CONTENTS, READONLY
 24 .sysid_hash   00000004  00000000  00000000  000123b4  2**0
                  CONTENTS, READONLY
 25 .sysid_base   00000004  00000000  00000000  000123b8  2**0
                  CONTENTS, READONLY
 26 .sysid_time   00000004  00000000  00000000  000123bc  2**0
                  CONTENTS, READONLY
 27 .stderr_dev   0000000b  00000000  00000000  000123c0  2**0
                  CONTENTS, READONLY
 28 .stdin_dev    0000000b  00000000  00000000  000123cb  2**0
                  CONTENTS, READONLY
 29 .stdout_dev   0000000b  00000000  00000000  000123d6  2**0
                  CONTENTS, READONLY
 30 .sopc_system_name 00000004  00000000  00000000  000123e1  2**0
                  CONTENTS, READONLY
 31 .quartus_project_dir 00000025  00000000  00000000  000123e5  2**0
                  CONTENTS, READONLY
 32 .jdi          000044b6  00000000  00000000  0001240a  2**0
                  CONTENTS, READONLY
 33 .sopcinfo     0004d597  00000000  00000000  000168c0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000020 l    d  .text	00000000 .text
10001b7c l    d  .rodata	00000000 .rodata
10001c20 l    d  .rwdata	00000000 .rwdata
10001ef4 l    d  .bss	00000000 .bss
00000000 l    d  .epcs_flash_controller_0	00000000 .epcs_flash_controller_0
10001f04 l    d  .ram	00000000 .ram
20000000 l    d  .sdram_0	00000000 .sdram_0
20800000 l    d  .sdram_1	00000000 .sdram_1
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_test_bsp//obj/HAL/src/crt0.o
10000068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
100003b8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
10001c20 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
10000c28 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
10000d80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10000eb4 l     F .text	00000034 alt_dev_reg
10001d00 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_close.c
1000119c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
100012f0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000131c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10001464 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
100015a4 l     F .text	0000003c alt_get_errno
100015e0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 memcmp.c
10000d14 g     F .text	0000006c alt_main
10000308 g     F .text	00000080 _puts_r
10001c20 g       *ABS*	00000000 __flash_rwdata_start
100002bc g     F .text	0000004c printf
1000185c g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	00000000 __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10001ef4 g     O .bss	00000004 errno
10001efc g     O .bss	00000004 alt_argv
10009ed4 g       *ABS*	00000000 _gp
10001d54 g     O .rwdata	00000180 alt_fd_list
10001880 g     F .text	00000090 alt_find_dev
10001528 g     F .text	0000007c alt_io_redirect
10000388 g     F .text	00000014 puts
1000101c g     F .text	000000ec altera_avalon_jtag_uart_read
10000280 g     F .text	0000003c _printf_r
10000b6c g     F .text	00000064 .hidden __udivsi3
10001abc g     F .text	00000090 alt_icache_flush
10000000 g       *ABS*	00000000 __alt_mem_ram
10001eec g     O .rwdata	00000004 alt_max_fd
10001ed4 g     O .rwdata	00000004 _global_impure_ptr
10001f04 g       *ABS*	00000000 __bss_end
10001d2c g     O .rwdata	00000028 alt_dev_null
100012a8 g     F .text	00000048 alt_dcache_flush_all
10001ef4 g       *ABS*	00000000 __ram_rwdata_end
10001ee4 g     O .rwdata	00000008 alt_dev_list
10000dbc g     F .text	000000f8 write
10001c20 g       *ABS*	00000000 __ram_rodata_end
10000bd0 g     F .text	00000058 .hidden __umodsi3
10001f04 g       *ABS*	00000000 end
1000a000 g       *ABS*	00000000 __alt_stack_pointer
10001108 g     F .text	00000094 altera_avalon_jtag_uart_write
10000424 g     F .text	00000524 ___vfprintf_internal_r
10000020 g     F .text	0000004c _start
10000f20 g     F .text	0000003c alt_sys_init
10001c20 g       *ABS*	00000000 __ram_rwdata_start
10001b7c g       *ABS*	00000000 __ram_rodata_start
10000f5c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10001a18 g     F .text	000000a4 alt_get_fd
10001b4c g     F .text	00000030 memcmp
10001f04 g       *ABS*	00000000 __alt_stack_base
00000000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
10001910 g     F .text	00000108 alt_find_file
10001358 g     F .text	000000a4 alt_dev_llist_insert
10000964 g     F .text	000000b8 __sfvwrite_small_dev
10001ef4 g       *ABS*	00000000 __bss_start
10000220 g     F .text	00000060 main
10001f00 g     O .bss	00000004 alt_envp
10000fbc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10001ef0 g     O .rwdata	00000004 alt_errno
10000a74 g     F .text	00000084 .hidden __divsi3
10001b7c g       *ABS*	00000000 __flash_rodata_start
100001c8 g     F .text	00000058 delay
10000ee8 g     F .text	00000038 alt_irq_init
100017f8 g     F .text	00000064 alt_release_fd
10000a1c g     F .text	00000058 _write_r
10001ed8 g     O .rwdata	00000004 _impure_ptr
10001ef8 g     O .bss	00000004 alt_argc
20000000 g       *ABS*	00000000 __alt_mem_sdram_0
10001edc g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
10001ef4 g       *ABS*	00000000 _edata
10001f04 g       *ABS*	00000000 _end
10000020 g       *ABS*	00000000 __ram_exceptions_end
20800000 g       *ABS*	00000000 __alt_mem_sdram_1
10000af8 g     F .text	00000074 .hidden __modsi3
1000a000 g       *ABS*	00000000 __alt_data_end
100013fc g     F .text	00000034 _exit
1000006c g     F .text	0000015c sdram_test
1000039c g     F .text	0000001c strlen
100016a4 g     F .text	00000154 open
10001430 g     F .text	00000034 alt_icache_flush_all
10000948 g     F .text	0000001c __vfprintf_internal
100011d8 g     F .text	000000d0 close
10000c90 g     F .text	00000084 alt_load



Disassembly of section .text:

10000020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10000020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
10000024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
10000028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
1000002c:	00bffd16 	blt	zero,r2,10000024 <__alt_mem_sdram_1+0xef800024>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000030:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
10000034:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
10000038:	06840034 	movhi	gp,4096
    ori gp, gp, %lo(_gp)
1000003c:	d6a7b514 	ori	gp,gp,40660
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000040:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
10000044:	1087bd14 	ori	r2,r2,7924

    movhi r3, %hi(__bss_end)
10000048:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
1000004c:	18c7c114 	ori	r3,r3,7940

    beq r2, r3, 1f
10000050:	10c00326 	beq	r2,r3,10000060 <_start+0x40>

0:
    stw zero, (r2)
10000054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000005c:	10fffd36 	bltu	r2,r3,10000054 <__alt_mem_sdram_1+0xef800054>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000060:	0000c900 	call	10000c90 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000064:	0000d140 	call	10000d14 <alt_main>

10000068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000068:	003fff06 	br	10000068 <__alt_mem_sdram_1+0xef800068>

1000006c <sdram_test>:

#define LED_ON() {IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,1);}
#define LED_OFF() {IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE,0);}
#define SDRAM0 (alt_u8)(0x20000000)

void sdram_test(alt_u8 *base, int len) {
1000006c:	defff804 	addi	sp,sp,-32
10000070:	dfc00715 	stw	ra,28(sp)
10000074:	df000615 	stw	fp,24(sp)
10000078:	df000604 	addi	fp,sp,24
1000007c:	e13ffe15 	stw	r4,-8(fp)
10000080:	e17fff15 	stw	r5,-4(fp)
	alt_u8 *addr = base;
10000084:	e0bffe17 	ldw	r2,-8(fp)
10000088:	e0bffa15 	stw	r2,-24(fp)
	char errFlag = 0;
1000008c:	e03ffb05 	stb	zero,-20(fp)
	for (addr = base; addr < (base + len); addr += 0x100) {
10000090:	e0bffe17 	ldw	r2,-8(fp)
10000094:	e0bffa15 	stw	r2,-24(fp)
10000098:	00003206 	br	10000164 <sdram_test+0xf8>
		for (int i = 0; i < 256; i++) {
1000009c:	e03ffc15 	stw	zero,-16(fp)
100000a0:	00000806 	br	100000c4 <sdram_test+0x58>
			*(addr + i) = i;
100000a4:	e0bffc17 	ldw	r2,-16(fp)
100000a8:	e0fffa17 	ldw	r3,-24(fp)
100000ac:	1885883a 	add	r2,r3,r2
100000b0:	e0fffc17 	ldw	r3,-16(fp)
100000b4:	10c00005 	stb	r3,0(r2)

void sdram_test(alt_u8 *base, int len) {
	alt_u8 *addr = base;
	char errFlag = 0;
	for (addr = base; addr < (base + len); addr += 0x100) {
		for (int i = 0; i < 256; i++) {
100000b8:	e0bffc17 	ldw	r2,-16(fp)
100000bc:	10800044 	addi	r2,r2,1
100000c0:	e0bffc15 	stw	r2,-16(fp)
100000c4:	e0bffc17 	ldw	r2,-16(fp)
100000c8:	10804010 	cmplti	r2,r2,256
100000cc:	103ff51e 	bne	r2,zero,100000a4 <__alt_mem_sdram_1+0xef8000a4>
			*(addr + i) = i;
		}
		for (int i = 0; i < 256; i++) {
100000d0:	e03ffd15 	stw	zero,-12(fp)
100000d4:	00001b06 	br	10000144 <sdram_test+0xd8>
			if (*(addr + i) != i) {
100000d8:	e0bffd17 	ldw	r2,-12(fp)
100000dc:	e0fffa17 	ldw	r3,-24(fp)
100000e0:	1885883a 	add	r2,r3,r2
100000e4:	10800003 	ldbu	r2,0(r2)
100000e8:	10c03fcc 	andi	r3,r2,255
100000ec:	e0bffd17 	ldw	r2,-12(fp)
100000f0:	18801126 	beq	r3,r2,10000138 <sdram_test+0xcc>
				errFlag = 1;
100000f4:	00800044 	movi	r2,1
100000f8:	e0bffb05 	stb	r2,-20(fp)
				printf("mem err at %08X,must=%d,now=%d\r\n", (int) addr + i, i,
100000fc:	e0fffa17 	ldw	r3,-24(fp)
10000100:	e0bffd17 	ldw	r2,-12(fp)
10000104:	1889883a 	add	r4,r3,r2
									*(addr + i));
10000108:	e0bffd17 	ldw	r2,-12(fp)
1000010c:	e0fffa17 	ldw	r3,-24(fp)
10000110:	1885883a 	add	r2,r3,r2
10000114:	10800003 	ldbu	r2,0(r2)
			*(addr + i) = i;
		}
		for (int i = 0; i < 256; i++) {
			if (*(addr + i) != i) {
				errFlag = 1;
				printf("mem err at %08X,must=%d,now=%d\r\n", (int) addr + i, i,
10000118:	10803fcc 	andi	r2,r2,255
1000011c:	100f883a 	mov	r7,r2
10000120:	e1bffd17 	ldw	r6,-12(fp)
10000124:	200b883a 	mov	r5,r4
10000128:	01040034 	movhi	r4,4096
1000012c:	2106df04 	addi	r4,r4,7036
10000130:	00002bc0 	call	100002bc <printf>
									*(addr + i));
				break;
10000134:	00000606 	br	10000150 <sdram_test+0xe4>
	char errFlag = 0;
	for (addr = base; addr < (base + len); addr += 0x100) {
		for (int i = 0; i < 256; i++) {
			*(addr + i) = i;
		}
		for (int i = 0; i < 256; i++) {
10000138:	e0bffd17 	ldw	r2,-12(fp)
1000013c:	10800044 	addi	r2,r2,1
10000140:	e0bffd15 	stw	r2,-12(fp)
10000144:	e0bffd17 	ldw	r2,-12(fp)
10000148:	10804010 	cmplti	r2,r2,256
1000014c:	103fe21e 	bne	r2,zero,100000d8 <__alt_mem_sdram_1+0xef8000d8>
				printf("mem err at %08X,must=%d,now=%d\r\n", (int) addr + i, i,
									*(addr + i));
				break;
			}
		}
		if (errFlag) {
10000150:	e0bffb07 	ldb	r2,-20(fp)
10000154:	1000091e 	bne	r2,zero,1000017c <sdram_test+0x110>
#define SDRAM0 (alt_u8)(0x20000000)

void sdram_test(alt_u8 *base, int len) {
	alt_u8 *addr = base;
	char errFlag = 0;
	for (addr = base; addr < (base + len); addr += 0x100) {
10000158:	e0bffa17 	ldw	r2,-24(fp)
1000015c:	10804004 	addi	r2,r2,256
10000160:	e0bffa15 	stw	r2,-24(fp)
10000164:	e0bfff17 	ldw	r2,-4(fp)
10000168:	e0fffe17 	ldw	r3,-8(fp)
1000016c:	1885883a 	add	r2,r3,r2
10000170:	e0fffa17 	ldw	r3,-24(fp)
10000174:	18bfc936 	bltu	r3,r2,1000009c <__alt_mem_sdram_1+0xef80009c>
10000178:	00000106 	br	10000180 <sdram_test+0x114>
									*(addr + i));
				break;
			}
		}
		if (errFlag) {
			break;
1000017c:	0001883a 	nop
		}
	}
	if (errFlag) {
10000180:	e0bffb07 	ldb	r2,-20(fp)
10000184:	10000426 	beq	r2,zero,10000198 <sdram_test+0x12c>
		printf("RAM TEST FAIL!\r\n");
10000188:	01040034 	movhi	r4,4096
1000018c:	2106e804 	addi	r4,r4,7072
10000190:	00003880 	call	10000388 <puts>
	} else {
		printf("RAM TEST SUCCESS! BASE: %8X LEN:%8X\r\n", (int) base, len);
	}

}
10000194:	00000606 	br	100001b0 <sdram_test+0x144>
		}
	}
	if (errFlag) {
		printf("RAM TEST FAIL!\r\n");
	} else {
		printf("RAM TEST SUCCESS! BASE: %8X LEN:%8X\r\n", (int) base, len);
10000198:	e0bffe17 	ldw	r2,-8(fp)
1000019c:	e1bfff17 	ldw	r6,-4(fp)
100001a0:	100b883a 	mov	r5,r2
100001a4:	01040034 	movhi	r4,4096
100001a8:	2106ec04 	addi	r4,r4,7088
100001ac:	00002bc0 	call	100002bc <printf>
	}

}
100001b0:	0001883a 	nop
100001b4:	e037883a 	mov	sp,fp
100001b8:	dfc00117 	ldw	ra,4(sp)
100001bc:	df000017 	ldw	fp,0(sp)
100001c0:	dec00204 	addi	sp,sp,8
100001c4:	f800283a 	ret

100001c8 <delay>:

void delay() {
100001c8:	defffd04 	addi	sp,sp,-12
100001cc:	df000215 	stw	fp,8(sp)
100001d0:	df000204 	addi	fp,sp,8
	volatile int i, j;
	i = 10000;
100001d4:	0089c404 	movi	r2,10000
100001d8:	e0bffe15 	stw	r2,-8(fp)
	while (i--) {
100001dc:	00000706 	br	100001fc <delay+0x34>
		j = 100;
100001e0:	00801904 	movi	r2,100
100001e4:	e0bfff15 	stw	r2,-4(fp)
		while (j--);
100001e8:	0001883a 	nop
100001ec:	e0bfff17 	ldw	r2,-4(fp)
100001f0:	10ffffc4 	addi	r3,r2,-1
100001f4:	e0ffff15 	stw	r3,-4(fp)
100001f8:	103ffc1e 	bne	r2,zero,100001ec <__alt_mem_sdram_1+0xef8001ec>
}

void delay() {
	volatile int i, j;
	i = 10000;
	while (i--) {
100001fc:	e0bffe17 	ldw	r2,-8(fp)
10000200:	10ffffc4 	addi	r3,r2,-1
10000204:	e0fffe15 	stw	r3,-8(fp)
10000208:	103ff51e 	bne	r2,zero,100001e0 <__alt_mem_sdram_1+0xef8001e0>
		j = 100;
		while (j--);
	}
}
1000020c:	0001883a 	nop
10000210:	e037883a 	mov	sp,fp
10000214:	df000017 	ldw	fp,0(sp)
10000218:	dec00104 	addi	sp,sp,4
1000021c:	f800283a 	ret

10000220 <main>:

int main() {
10000220:	defffe04 	addi	sp,sp,-8
10000224:	dfc00115 	stw	ra,4(sp)
10000228:	df000015 	stw	fp,0(sp)
1000022c:	d839883a 	mov	fp,sp
	printf("Hello World!\n");
10000230:	01040034 	movhi	r4,4096
10000234:	2106f604 	addi	r4,r4,7128
10000238:	00003880 	call	10000388 <puts>
	sdram_test((alt_u8 *)0x20000000,0x800000);
1000023c:	01402034 	movhi	r5,128
10000240:	01080034 	movhi	r4,8192
10000244:	000006c0 	call	1000006c <sdram_test>
	sdram_test((alt_u8 *) 0x20800000, 0x800000);
10000248:	01402034 	movhi	r5,128
1000024c:	01082034 	movhi	r4,8320
10000250:	000006c0 	call	1000006c <sdram_test>
	while (1) {
		LED_ON();
10000254:	00c00044 	movi	r3,1
10000258:	00804074 	movhi	r2,257
1000025c:	10a40004 	addi	r2,r2,-28672
10000260:	10c00035 	stwio	r3,0(r2)
		delay();
10000264:	00001c80 	call	100001c8 <delay>
		LED_OFF();
10000268:	0007883a 	mov	r3,zero
1000026c:	00804074 	movhi	r2,257
10000270:	10a40004 	addi	r2,r2,-28672
10000274:	10c00035 	stwio	r3,0(r2)
		delay();
10000278:	00001c80 	call	100001c8 <delay>
	}
1000027c:	003ff506 	br	10000254 <__alt_mem_sdram_1+0xef800254>

10000280 <_printf_r>:
10000280:	defffd04 	addi	sp,sp,-12
10000284:	dfc00015 	stw	ra,0(sp)
10000288:	d9800115 	stw	r6,4(sp)
1000028c:	d9c00215 	stw	r7,8(sp)
10000290:	20c00217 	ldw	r3,8(r4)
10000294:	01840034 	movhi	r6,4096
10000298:	31825904 	addi	r6,r6,2404
1000029c:	19800115 	stw	r6,4(r3)
100002a0:	280d883a 	mov	r6,r5
100002a4:	21400217 	ldw	r5,8(r4)
100002a8:	d9c00104 	addi	r7,sp,4
100002ac:	00004240 	call	10000424 <___vfprintf_internal_r>
100002b0:	dfc00017 	ldw	ra,0(sp)
100002b4:	dec00304 	addi	sp,sp,12
100002b8:	f800283a 	ret

100002bc <printf>:
100002bc:	defffc04 	addi	sp,sp,-16
100002c0:	dfc00015 	stw	ra,0(sp)
100002c4:	d9400115 	stw	r5,4(sp)
100002c8:	d9800215 	stw	r6,8(sp)
100002cc:	d9c00315 	stw	r7,12(sp)
100002d0:	00840034 	movhi	r2,4096
100002d4:	1087b604 	addi	r2,r2,7896
100002d8:	10800017 	ldw	r2,0(r2)
100002dc:	01440034 	movhi	r5,4096
100002e0:	29425904 	addi	r5,r5,2404
100002e4:	10c00217 	ldw	r3,8(r2)
100002e8:	d9800104 	addi	r6,sp,4
100002ec:	19400115 	stw	r5,4(r3)
100002f0:	200b883a 	mov	r5,r4
100002f4:	11000217 	ldw	r4,8(r2)
100002f8:	00009480 	call	10000948 <__vfprintf_internal>
100002fc:	dfc00017 	ldw	ra,0(sp)
10000300:	dec00404 	addi	sp,sp,16
10000304:	f800283a 	ret

10000308 <_puts_r>:
10000308:	defffd04 	addi	sp,sp,-12
1000030c:	dc000015 	stw	r16,0(sp)
10000310:	2021883a 	mov	r16,r4
10000314:	2809883a 	mov	r4,r5
10000318:	dfc00215 	stw	ra,8(sp)
1000031c:	dc400115 	stw	r17,4(sp)
10000320:	2823883a 	mov	r17,r5
10000324:	000039c0 	call	1000039c <strlen>
10000328:	81400217 	ldw	r5,8(r16)
1000032c:	01040034 	movhi	r4,4096
10000330:	21025904 	addi	r4,r4,2404
10000334:	29000115 	stw	r4,4(r5)
10000338:	100f883a 	mov	r7,r2
1000033c:	880d883a 	mov	r6,r17
10000340:	8009883a 	mov	r4,r16
10000344:	00009640 	call	10000964 <__sfvwrite_small_dev>
10000348:	00ffffc4 	movi	r3,-1
1000034c:	10c00926 	beq	r2,r3,10000374 <_puts_r+0x6c>
10000350:	81400217 	ldw	r5,8(r16)
10000354:	01840034 	movhi	r6,4096
10000358:	01c00044 	movi	r7,1
1000035c:	28800117 	ldw	r2,4(r5)
10000360:	3186fa04 	addi	r6,r6,7144
10000364:	8009883a 	mov	r4,r16
10000368:	103ee83a 	callr	r2
1000036c:	10bfffe0 	cmpeqi	r2,r2,-1
10000370:	0085c83a 	sub	r2,zero,r2
10000374:	dfc00217 	ldw	ra,8(sp)
10000378:	dc400117 	ldw	r17,4(sp)
1000037c:	dc000017 	ldw	r16,0(sp)
10000380:	dec00304 	addi	sp,sp,12
10000384:	f800283a 	ret

10000388 <puts>:
10000388:	00840034 	movhi	r2,4096
1000038c:	1087b604 	addi	r2,r2,7896
10000390:	200b883a 	mov	r5,r4
10000394:	11000017 	ldw	r4,0(r2)
10000398:	00003081 	jmpi	10000308 <_puts_r>

1000039c <strlen>:
1000039c:	2005883a 	mov	r2,r4
100003a0:	10c00007 	ldb	r3,0(r2)
100003a4:	18000226 	beq	r3,zero,100003b0 <strlen+0x14>
100003a8:	10800044 	addi	r2,r2,1
100003ac:	003ffc06 	br	100003a0 <__alt_mem_sdram_1+0xef8003a0>
100003b0:	1105c83a 	sub	r2,r2,r4
100003b4:	f800283a 	ret

100003b8 <print_repeat>:
100003b8:	defffb04 	addi	sp,sp,-20
100003bc:	dc800315 	stw	r18,12(sp)
100003c0:	dc400215 	stw	r17,8(sp)
100003c4:	dc000115 	stw	r16,4(sp)
100003c8:	dfc00415 	stw	ra,16(sp)
100003cc:	2025883a 	mov	r18,r4
100003d0:	2823883a 	mov	r17,r5
100003d4:	d9800005 	stb	r6,0(sp)
100003d8:	3821883a 	mov	r16,r7
100003dc:	04000a0e 	bge	zero,r16,10000408 <print_repeat+0x50>
100003e0:	88800117 	ldw	r2,4(r17)
100003e4:	01c00044 	movi	r7,1
100003e8:	d80d883a 	mov	r6,sp
100003ec:	880b883a 	mov	r5,r17
100003f0:	9009883a 	mov	r4,r18
100003f4:	103ee83a 	callr	r2
100003f8:	843fffc4 	addi	r16,r16,-1
100003fc:	103ff726 	beq	r2,zero,100003dc <__alt_mem_sdram_1+0xef8003dc>
10000400:	00bfffc4 	movi	r2,-1
10000404:	00000106 	br	1000040c <print_repeat+0x54>
10000408:	0005883a 	mov	r2,zero
1000040c:	dfc00417 	ldw	ra,16(sp)
10000410:	dc800317 	ldw	r18,12(sp)
10000414:	dc400217 	ldw	r17,8(sp)
10000418:	dc000117 	ldw	r16,4(sp)
1000041c:	dec00504 	addi	sp,sp,20
10000420:	f800283a 	ret

10000424 <___vfprintf_internal_r>:
10000424:	deffe504 	addi	sp,sp,-108
10000428:	d8c00804 	addi	r3,sp,32
1000042c:	df001915 	stw	fp,100(sp)
10000430:	ddc01815 	stw	r23,96(sp)
10000434:	dd801715 	stw	r22,92(sp)
10000438:	dd401615 	stw	r21,88(sp)
1000043c:	dd001515 	stw	r20,84(sp)
10000440:	dcc01415 	stw	r19,80(sp)
10000444:	dc801315 	stw	r18,76(sp)
10000448:	dc401215 	stw	r17,72(sp)
1000044c:	dc001115 	stw	r16,68(sp)
10000450:	dfc01a15 	stw	ra,104(sp)
10000454:	2027883a 	mov	r19,r4
10000458:	2839883a 	mov	fp,r5
1000045c:	382d883a 	mov	r22,r7
10000460:	d9800f15 	stw	r6,60(sp)
10000464:	0021883a 	mov	r16,zero
10000468:	d8000e15 	stw	zero,56(sp)
1000046c:	002f883a 	mov	r23,zero
10000470:	002b883a 	mov	r21,zero
10000474:	0025883a 	mov	r18,zero
10000478:	0023883a 	mov	r17,zero
1000047c:	d8000c15 	stw	zero,48(sp)
10000480:	d8000b15 	stw	zero,44(sp)
10000484:	0029883a 	mov	r20,zero
10000488:	d8c00915 	stw	r3,36(sp)
1000048c:	d8c00f17 	ldw	r3,60(sp)
10000490:	19000003 	ldbu	r4,0(r3)
10000494:	20803fcc 	andi	r2,r4,255
10000498:	1080201c 	xori	r2,r2,128
1000049c:	10bfe004 	addi	r2,r2,-128
100004a0:	10011c26 	beq	r2,zero,10000914 <___vfprintf_internal_r+0x4f0>
100004a4:	00c00044 	movi	r3,1
100004a8:	a0c01426 	beq	r20,r3,100004fc <___vfprintf_internal_r+0xd8>
100004ac:	1d000216 	blt	r3,r20,100004b8 <___vfprintf_internal_r+0x94>
100004b0:	a0000626 	beq	r20,zero,100004cc <___vfprintf_internal_r+0xa8>
100004b4:	00011306 	br	10000904 <___vfprintf_internal_r+0x4e0>
100004b8:	01400084 	movi	r5,2
100004bc:	a1401d26 	beq	r20,r5,10000534 <___vfprintf_internal_r+0x110>
100004c0:	014000c4 	movi	r5,3
100004c4:	a1402926 	beq	r20,r5,1000056c <___vfprintf_internal_r+0x148>
100004c8:	00010e06 	br	10000904 <___vfprintf_internal_r+0x4e0>
100004cc:	01400944 	movi	r5,37
100004d0:	1140fb26 	beq	r2,r5,100008c0 <___vfprintf_internal_r+0x49c>
100004d4:	e0800117 	ldw	r2,4(fp)
100004d8:	d9000005 	stb	r4,0(sp)
100004dc:	01c00044 	movi	r7,1
100004e0:	d80d883a 	mov	r6,sp
100004e4:	e00b883a 	mov	r5,fp
100004e8:	9809883a 	mov	r4,r19
100004ec:	103ee83a 	callr	r2
100004f0:	1000d61e 	bne	r2,zero,1000084c <___vfprintf_internal_r+0x428>
100004f4:	84000044 	addi	r16,r16,1
100004f8:	00010206 	br	10000904 <___vfprintf_internal_r+0x4e0>
100004fc:	01400c04 	movi	r5,48
10000500:	1140f826 	beq	r2,r5,100008e4 <___vfprintf_internal_r+0x4c0>
10000504:	01400944 	movi	r5,37
10000508:	11400a1e 	bne	r2,r5,10000534 <___vfprintf_internal_r+0x110>
1000050c:	d8800005 	stb	r2,0(sp)
10000510:	e0800117 	ldw	r2,4(fp)
10000514:	a00f883a 	mov	r7,r20
10000518:	d80d883a 	mov	r6,sp
1000051c:	e00b883a 	mov	r5,fp
10000520:	9809883a 	mov	r4,r19
10000524:	103ee83a 	callr	r2
10000528:	1000c81e 	bne	r2,zero,1000084c <___vfprintf_internal_r+0x428>
1000052c:	84000044 	addi	r16,r16,1
10000530:	0000f306 	br	10000900 <___vfprintf_internal_r+0x4dc>
10000534:	217ff404 	addi	r5,r4,-48
10000538:	29403fcc 	andi	r5,r5,255
1000053c:	00c00244 	movi	r3,9
10000540:	19400736 	bltu	r3,r5,10000560 <___vfprintf_internal_r+0x13c>
10000544:	00bfffc4 	movi	r2,-1
10000548:	88800226 	beq	r17,r2,10000554 <___vfprintf_internal_r+0x130>
1000054c:	8c4002a4 	muli	r17,r17,10
10000550:	00000106 	br	10000558 <___vfprintf_internal_r+0x134>
10000554:	0023883a 	mov	r17,zero
10000558:	2c63883a 	add	r17,r5,r17
1000055c:	0000e206 	br	100008e8 <___vfprintf_internal_r+0x4c4>
10000560:	01400b84 	movi	r5,46
10000564:	1140e426 	beq	r2,r5,100008f8 <___vfprintf_internal_r+0x4d4>
10000568:	05000084 	movi	r20,2
1000056c:	213ff404 	addi	r4,r4,-48
10000570:	21003fcc 	andi	r4,r4,255
10000574:	00c00244 	movi	r3,9
10000578:	19000736 	bltu	r3,r4,10000598 <___vfprintf_internal_r+0x174>
1000057c:	00bfffc4 	movi	r2,-1
10000580:	90800226 	beq	r18,r2,1000058c <___vfprintf_internal_r+0x168>
10000584:	948002a4 	muli	r18,r18,10
10000588:	00000106 	br	10000590 <___vfprintf_internal_r+0x16c>
1000058c:	0025883a 	mov	r18,zero
10000590:	24a5883a 	add	r18,r4,r18
10000594:	0000db06 	br	10000904 <___vfprintf_internal_r+0x4e0>
10000598:	00c01b04 	movi	r3,108
1000059c:	10c0d426 	beq	r2,r3,100008f0 <___vfprintf_internal_r+0x4cc>
100005a0:	013fffc4 	movi	r4,-1
100005a4:	91000226 	beq	r18,r4,100005b0 <___vfprintf_internal_r+0x18c>
100005a8:	d8000b15 	stw	zero,44(sp)
100005ac:	00000106 	br	100005b4 <___vfprintf_internal_r+0x190>
100005b0:	04800044 	movi	r18,1
100005b4:	01001a44 	movi	r4,105
100005b8:	11001626 	beq	r2,r4,10000614 <___vfprintf_internal_r+0x1f0>
100005bc:	20800916 	blt	r4,r2,100005e4 <___vfprintf_internal_r+0x1c0>
100005c0:	010018c4 	movi	r4,99
100005c4:	11008a26 	beq	r2,r4,100007f0 <___vfprintf_internal_r+0x3cc>
100005c8:	01001904 	movi	r4,100
100005cc:	11001126 	beq	r2,r4,10000614 <___vfprintf_internal_r+0x1f0>
100005d0:	01001604 	movi	r4,88
100005d4:	1100ca1e 	bne	r2,r4,10000900 <___vfprintf_internal_r+0x4dc>
100005d8:	00c00044 	movi	r3,1
100005dc:	d8c00e15 	stw	r3,56(sp)
100005e0:	00001406 	br	10000634 <___vfprintf_internal_r+0x210>
100005e4:	01001cc4 	movi	r4,115
100005e8:	11009a26 	beq	r2,r4,10000854 <___vfprintf_internal_r+0x430>
100005ec:	20800416 	blt	r4,r2,10000600 <___vfprintf_internal_r+0x1dc>
100005f0:	01001bc4 	movi	r4,111
100005f4:	1100c21e 	bne	r2,r4,10000900 <___vfprintf_internal_r+0x4dc>
100005f8:	05400204 	movi	r21,8
100005fc:	00000e06 	br	10000638 <___vfprintf_internal_r+0x214>
10000600:	01001d44 	movi	r4,117
10000604:	11000c26 	beq	r2,r4,10000638 <___vfprintf_internal_r+0x214>
10000608:	01001e04 	movi	r4,120
1000060c:	11000926 	beq	r2,r4,10000634 <___vfprintf_internal_r+0x210>
10000610:	0000bb06 	br	10000900 <___vfprintf_internal_r+0x4dc>
10000614:	b5000104 	addi	r20,r22,4
10000618:	b8000726 	beq	r23,zero,10000638 <___vfprintf_internal_r+0x214>
1000061c:	dd000d15 	stw	r20,52(sp)
10000620:	b5800017 	ldw	r22,0(r22)
10000624:	b000080e 	bge	r22,zero,10000648 <___vfprintf_internal_r+0x224>
10000628:	05adc83a 	sub	r22,zero,r22
1000062c:	02800044 	movi	r10,1
10000630:	00000606 	br	1000064c <___vfprintf_internal_r+0x228>
10000634:	05400404 	movi	r21,16
10000638:	b0c00104 	addi	r3,r22,4
1000063c:	d8c00d15 	stw	r3,52(sp)
10000640:	b5800017 	ldw	r22,0(r22)
10000644:	002f883a 	mov	r23,zero
10000648:	0015883a 	mov	r10,zero
1000064c:	d829883a 	mov	r20,sp
10000650:	b0001426 	beq	r22,zero,100006a4 <___vfprintf_internal_r+0x280>
10000654:	b009883a 	mov	r4,r22
10000658:	a80b883a 	mov	r5,r21
1000065c:	da801015 	stw	r10,64(sp)
10000660:	0000b6c0 	call	10000b6c <__udivsi3>
10000664:	1549383a 	mul	r4,r2,r21
10000668:	00c00244 	movi	r3,9
1000066c:	da801017 	ldw	r10,64(sp)
10000670:	b12dc83a 	sub	r22,r22,r4
10000674:	1d800216 	blt	r3,r22,10000680 <___vfprintf_internal_r+0x25c>
10000678:	b5800c04 	addi	r22,r22,48
1000067c:	00000506 	br	10000694 <___vfprintf_internal_r+0x270>
10000680:	d8c00e17 	ldw	r3,56(sp)
10000684:	18000226 	beq	r3,zero,10000690 <___vfprintf_internal_r+0x26c>
10000688:	b5800dc4 	addi	r22,r22,55
1000068c:	00000106 	br	10000694 <___vfprintf_internal_r+0x270>
10000690:	b58015c4 	addi	r22,r22,87
10000694:	a5800005 	stb	r22,0(r20)
10000698:	a5000044 	addi	r20,r20,1
1000069c:	102d883a 	mov	r22,r2
100006a0:	003feb06 	br	10000650 <__alt_mem_sdram_1+0xef800650>
100006a4:	a6c7c83a 	sub	r3,r20,sp
100006a8:	d8c00a15 	stw	r3,40(sp)
100006ac:	90c5c83a 	sub	r2,r18,r3
100006b0:	00800a0e 	bge	zero,r2,100006dc <___vfprintf_internal_r+0x2b8>
100006b4:	a085883a 	add	r2,r20,r2
100006b8:	01400c04 	movi	r5,48
100006bc:	d8c00917 	ldw	r3,36(sp)
100006c0:	a009883a 	mov	r4,r20
100006c4:	a0c0032e 	bgeu	r20,r3,100006d4 <___vfprintf_internal_r+0x2b0>
100006c8:	a5000044 	addi	r20,r20,1
100006cc:	21400005 	stb	r5,0(r4)
100006d0:	a0bffa1e 	bne	r20,r2,100006bc <__alt_mem_sdram_1+0xef8006bc>
100006d4:	a6c7c83a 	sub	r3,r20,sp
100006d8:	d8c00a15 	stw	r3,40(sp)
100006dc:	d8c00a17 	ldw	r3,40(sp)
100006e0:	50d3883a 	add	r9,r10,r3
100006e4:	d8c00b17 	ldw	r3,44(sp)
100006e8:	8a6dc83a 	sub	r22,r17,r9
100006ec:	18001726 	beq	r3,zero,1000074c <___vfprintf_internal_r+0x328>
100006f0:	50000a26 	beq	r10,zero,1000071c <___vfprintf_internal_r+0x2f8>
100006f4:	00800b44 	movi	r2,45
100006f8:	d8800805 	stb	r2,32(sp)
100006fc:	e0800117 	ldw	r2,4(fp)
10000700:	01c00044 	movi	r7,1
10000704:	d9800804 	addi	r6,sp,32
10000708:	e00b883a 	mov	r5,fp
1000070c:	9809883a 	mov	r4,r19
10000710:	103ee83a 	callr	r2
10000714:	10004d1e 	bne	r2,zero,1000084c <___vfprintf_internal_r+0x428>
10000718:	84000044 	addi	r16,r16,1
1000071c:	0580070e 	bge	zero,r22,1000073c <___vfprintf_internal_r+0x318>
10000720:	b00f883a 	mov	r7,r22
10000724:	01800c04 	movi	r6,48
10000728:	e00b883a 	mov	r5,fp
1000072c:	9809883a 	mov	r4,r19
10000730:	00003b80 	call	100003b8 <print_repeat>
10000734:	1000451e 	bne	r2,zero,1000084c <___vfprintf_internal_r+0x428>
10000738:	85a1883a 	add	r16,r16,r22
1000073c:	d8c00a17 	ldw	r3,40(sp)
10000740:	a013883a 	mov	r9,r20
10000744:	1d2dc83a 	sub	r22,r3,r20
10000748:	00002206 	br	100007d4 <___vfprintf_internal_r+0x3b0>
1000074c:	0580090e 	bge	zero,r22,10000774 <___vfprintf_internal_r+0x350>
10000750:	b00f883a 	mov	r7,r22
10000754:	01800804 	movi	r6,32
10000758:	e00b883a 	mov	r5,fp
1000075c:	9809883a 	mov	r4,r19
10000760:	da801015 	stw	r10,64(sp)
10000764:	00003b80 	call	100003b8 <print_repeat>
10000768:	da801017 	ldw	r10,64(sp)
1000076c:	1000371e 	bne	r2,zero,1000084c <___vfprintf_internal_r+0x428>
10000770:	85a1883a 	add	r16,r16,r22
10000774:	503ff126 	beq	r10,zero,1000073c <__alt_mem_sdram_1+0xef80073c>
10000778:	00800b44 	movi	r2,45
1000077c:	d8800805 	stb	r2,32(sp)
10000780:	e0800117 	ldw	r2,4(fp)
10000784:	01c00044 	movi	r7,1
10000788:	d9800804 	addi	r6,sp,32
1000078c:	e00b883a 	mov	r5,fp
10000790:	9809883a 	mov	r4,r19
10000794:	103ee83a 	callr	r2
10000798:	10002c1e 	bne	r2,zero,1000084c <___vfprintf_internal_r+0x428>
1000079c:	84000044 	addi	r16,r16,1
100007a0:	003fe606 	br	1000073c <__alt_mem_sdram_1+0xef80073c>
100007a4:	4a7fffc4 	addi	r9,r9,-1
100007a8:	48800003 	ldbu	r2,0(r9)
100007ac:	01c00044 	movi	r7,1
100007b0:	d9800804 	addi	r6,sp,32
100007b4:	d8800805 	stb	r2,32(sp)
100007b8:	e0800117 	ldw	r2,4(fp)
100007bc:	e00b883a 	mov	r5,fp
100007c0:	da401015 	stw	r9,64(sp)
100007c4:	9809883a 	mov	r4,r19
100007c8:	103ee83a 	callr	r2
100007cc:	da401017 	ldw	r9,64(sp)
100007d0:	10001e1e 	bne	r2,zero,1000084c <___vfprintf_internal_r+0x428>
100007d4:	8245c83a 	sub	r2,r16,r9
100007d8:	4d89883a 	add	r4,r9,r22
100007dc:	a085883a 	add	r2,r20,r2
100007e0:	013ff016 	blt	zero,r4,100007a4 <__alt_mem_sdram_1+0xef8007a4>
100007e4:	1021883a 	mov	r16,r2
100007e8:	dd800d17 	ldw	r22,52(sp)
100007ec:	00004406 	br	10000900 <___vfprintf_internal_r+0x4dc>
100007f0:	00800044 	movi	r2,1
100007f4:	1440080e 	bge	r2,r17,10000818 <___vfprintf_internal_r+0x3f4>
100007f8:	8d3fffc4 	addi	r20,r17,-1
100007fc:	a00f883a 	mov	r7,r20
10000800:	01800804 	movi	r6,32
10000804:	e00b883a 	mov	r5,fp
10000808:	9809883a 	mov	r4,r19
1000080c:	00003b80 	call	100003b8 <print_repeat>
10000810:	10000e1e 	bne	r2,zero,1000084c <___vfprintf_internal_r+0x428>
10000814:	8521883a 	add	r16,r16,r20
10000818:	b0800017 	ldw	r2,0(r22)
1000081c:	01c00044 	movi	r7,1
10000820:	d80d883a 	mov	r6,sp
10000824:	d8800005 	stb	r2,0(sp)
10000828:	e0800117 	ldw	r2,4(fp)
1000082c:	e00b883a 	mov	r5,fp
10000830:	9809883a 	mov	r4,r19
10000834:	b5000104 	addi	r20,r22,4
10000838:	103ee83a 	callr	r2
1000083c:	1000031e 	bne	r2,zero,1000084c <___vfprintf_internal_r+0x428>
10000840:	84000044 	addi	r16,r16,1
10000844:	a02d883a 	mov	r22,r20
10000848:	00002d06 	br	10000900 <___vfprintf_internal_r+0x4dc>
1000084c:	00bfffc4 	movi	r2,-1
10000850:	00003106 	br	10000918 <___vfprintf_internal_r+0x4f4>
10000854:	b5000017 	ldw	r20,0(r22)
10000858:	b0c00104 	addi	r3,r22,4
1000085c:	d8c00a15 	stw	r3,40(sp)
10000860:	a009883a 	mov	r4,r20
10000864:	000039c0 	call	1000039c <strlen>
10000868:	8893c83a 	sub	r9,r17,r2
1000086c:	102d883a 	mov	r22,r2
10000870:	0240090e 	bge	zero,r9,10000898 <___vfprintf_internal_r+0x474>
10000874:	480f883a 	mov	r7,r9
10000878:	01800804 	movi	r6,32
1000087c:	e00b883a 	mov	r5,fp
10000880:	9809883a 	mov	r4,r19
10000884:	da401015 	stw	r9,64(sp)
10000888:	00003b80 	call	100003b8 <print_repeat>
1000088c:	da401017 	ldw	r9,64(sp)
10000890:	103fee1e 	bne	r2,zero,1000084c <__alt_mem_sdram_1+0xef80084c>
10000894:	8261883a 	add	r16,r16,r9
10000898:	e0800117 	ldw	r2,4(fp)
1000089c:	b00f883a 	mov	r7,r22
100008a0:	a00d883a 	mov	r6,r20
100008a4:	e00b883a 	mov	r5,fp
100008a8:	9809883a 	mov	r4,r19
100008ac:	103ee83a 	callr	r2
100008b0:	103fe61e 	bne	r2,zero,1000084c <__alt_mem_sdram_1+0xef80084c>
100008b4:	85a1883a 	add	r16,r16,r22
100008b8:	dd800a17 	ldw	r22,40(sp)
100008bc:	00001006 	br	10000900 <___vfprintf_internal_r+0x4dc>
100008c0:	05c00044 	movi	r23,1
100008c4:	04bfffc4 	movi	r18,-1
100008c8:	d8000e15 	stw	zero,56(sp)
100008cc:	05400284 	movi	r21,10
100008d0:	9023883a 	mov	r17,r18
100008d4:	d8000c15 	stw	zero,48(sp)
100008d8:	d8000b15 	stw	zero,44(sp)
100008dc:	b829883a 	mov	r20,r23
100008e0:	00000806 	br	10000904 <___vfprintf_internal_r+0x4e0>
100008e4:	dd000b15 	stw	r20,44(sp)
100008e8:	05000084 	movi	r20,2
100008ec:	00000506 	br	10000904 <___vfprintf_internal_r+0x4e0>
100008f0:	00c00044 	movi	r3,1
100008f4:	d8c00c15 	stw	r3,48(sp)
100008f8:	050000c4 	movi	r20,3
100008fc:	00000106 	br	10000904 <___vfprintf_internal_r+0x4e0>
10000900:	0029883a 	mov	r20,zero
10000904:	d8c00f17 	ldw	r3,60(sp)
10000908:	18c00044 	addi	r3,r3,1
1000090c:	d8c00f15 	stw	r3,60(sp)
10000910:	003ede06 	br	1000048c <__alt_mem_sdram_1+0xef80048c>
10000914:	8005883a 	mov	r2,r16
10000918:	dfc01a17 	ldw	ra,104(sp)
1000091c:	df001917 	ldw	fp,100(sp)
10000920:	ddc01817 	ldw	r23,96(sp)
10000924:	dd801717 	ldw	r22,92(sp)
10000928:	dd401617 	ldw	r21,88(sp)
1000092c:	dd001517 	ldw	r20,84(sp)
10000930:	dcc01417 	ldw	r19,80(sp)
10000934:	dc801317 	ldw	r18,76(sp)
10000938:	dc401217 	ldw	r17,72(sp)
1000093c:	dc001117 	ldw	r16,68(sp)
10000940:	dec01b04 	addi	sp,sp,108
10000944:	f800283a 	ret

10000948 <__vfprintf_internal>:
10000948:	00840034 	movhi	r2,4096
1000094c:	1087b604 	addi	r2,r2,7896
10000950:	300f883a 	mov	r7,r6
10000954:	280d883a 	mov	r6,r5
10000958:	200b883a 	mov	r5,r4
1000095c:	11000017 	ldw	r4,0(r2)
10000960:	00004241 	jmpi	10000424 <___vfprintf_internal_r>

10000964 <__sfvwrite_small_dev>:
10000964:	2880000b 	ldhu	r2,0(r5)
10000968:	1080020c 	andi	r2,r2,8
1000096c:	10002126 	beq	r2,zero,100009f4 <__sfvwrite_small_dev+0x90>
10000970:	2880008f 	ldh	r2,2(r5)
10000974:	defffa04 	addi	sp,sp,-24
10000978:	dc000015 	stw	r16,0(sp)
1000097c:	dfc00515 	stw	ra,20(sp)
10000980:	dd000415 	stw	r20,16(sp)
10000984:	dcc00315 	stw	r19,12(sp)
10000988:	dc800215 	stw	r18,8(sp)
1000098c:	dc400115 	stw	r17,4(sp)
10000990:	2821883a 	mov	r16,r5
10000994:	10001216 	blt	r2,zero,100009e0 <__sfvwrite_small_dev+0x7c>
10000998:	2027883a 	mov	r19,r4
1000099c:	3025883a 	mov	r18,r6
100009a0:	3823883a 	mov	r17,r7
100009a4:	05010004 	movi	r20,1024
100009a8:	04400b0e 	bge	zero,r17,100009d8 <__sfvwrite_small_dev+0x74>
100009ac:	880f883a 	mov	r7,r17
100009b0:	a440010e 	bge	r20,r17,100009b8 <__sfvwrite_small_dev+0x54>
100009b4:	01c10004 	movi	r7,1024
100009b8:	8140008f 	ldh	r5,2(r16)
100009bc:	900d883a 	mov	r6,r18
100009c0:	9809883a 	mov	r4,r19
100009c4:	0000a1c0 	call	10000a1c <_write_r>
100009c8:	0080050e 	bge	zero,r2,100009e0 <__sfvwrite_small_dev+0x7c>
100009cc:	88a3c83a 	sub	r17,r17,r2
100009d0:	90a5883a 	add	r18,r18,r2
100009d4:	003ff406 	br	100009a8 <__alt_mem_sdram_1+0xef8009a8>
100009d8:	0005883a 	mov	r2,zero
100009dc:	00000706 	br	100009fc <__sfvwrite_small_dev+0x98>
100009e0:	8080000b 	ldhu	r2,0(r16)
100009e4:	10801014 	ori	r2,r2,64
100009e8:	8080000d 	sth	r2,0(r16)
100009ec:	00bfffc4 	movi	r2,-1
100009f0:	00000206 	br	100009fc <__sfvwrite_small_dev+0x98>
100009f4:	00bfffc4 	movi	r2,-1
100009f8:	f800283a 	ret
100009fc:	dfc00517 	ldw	ra,20(sp)
10000a00:	dd000417 	ldw	r20,16(sp)
10000a04:	dcc00317 	ldw	r19,12(sp)
10000a08:	dc800217 	ldw	r18,8(sp)
10000a0c:	dc400117 	ldw	r17,4(sp)
10000a10:	dc000017 	ldw	r16,0(sp)
10000a14:	dec00604 	addi	sp,sp,24
10000a18:	f800283a 	ret

10000a1c <_write_r>:
10000a1c:	defffd04 	addi	sp,sp,-12
10000a20:	dc000015 	stw	r16,0(sp)
10000a24:	04040034 	movhi	r16,4096
10000a28:	dc400115 	stw	r17,4(sp)
10000a2c:	8407bd04 	addi	r16,r16,7924
10000a30:	2023883a 	mov	r17,r4
10000a34:	2809883a 	mov	r4,r5
10000a38:	300b883a 	mov	r5,r6
10000a3c:	380d883a 	mov	r6,r7
10000a40:	dfc00215 	stw	ra,8(sp)
10000a44:	80000015 	stw	zero,0(r16)
10000a48:	0000dbc0 	call	10000dbc <write>
10000a4c:	00ffffc4 	movi	r3,-1
10000a50:	10c0031e 	bne	r2,r3,10000a60 <_write_r+0x44>
10000a54:	80c00017 	ldw	r3,0(r16)
10000a58:	18000126 	beq	r3,zero,10000a60 <_write_r+0x44>
10000a5c:	88c00015 	stw	r3,0(r17)
10000a60:	dfc00217 	ldw	ra,8(sp)
10000a64:	dc400117 	ldw	r17,4(sp)
10000a68:	dc000017 	ldw	r16,0(sp)
10000a6c:	dec00304 	addi	sp,sp,12
10000a70:	f800283a 	ret

10000a74 <__divsi3>:
10000a74:	20001b16 	blt	r4,zero,10000ae4 <__divsi3+0x70>
10000a78:	000f883a 	mov	r7,zero
10000a7c:	28001616 	blt	r5,zero,10000ad8 <__divsi3+0x64>
10000a80:	200d883a 	mov	r6,r4
10000a84:	29001a2e 	bgeu	r5,r4,10000af0 <__divsi3+0x7c>
10000a88:	00800804 	movi	r2,32
10000a8c:	00c00044 	movi	r3,1
10000a90:	00000106 	br	10000a98 <__divsi3+0x24>
10000a94:	10000d26 	beq	r2,zero,10000acc <__divsi3+0x58>
10000a98:	294b883a 	add	r5,r5,r5
10000a9c:	10bfffc4 	addi	r2,r2,-1
10000aa0:	18c7883a 	add	r3,r3,r3
10000aa4:	293ffb36 	bltu	r5,r4,10000a94 <__alt_mem_sdram_1+0xef800a94>
10000aa8:	0005883a 	mov	r2,zero
10000aac:	18000726 	beq	r3,zero,10000acc <__divsi3+0x58>
10000ab0:	0005883a 	mov	r2,zero
10000ab4:	31400236 	bltu	r6,r5,10000ac0 <__divsi3+0x4c>
10000ab8:	314dc83a 	sub	r6,r6,r5
10000abc:	10c4b03a 	or	r2,r2,r3
10000ac0:	1806d07a 	srli	r3,r3,1
10000ac4:	280ad07a 	srli	r5,r5,1
10000ac8:	183ffa1e 	bne	r3,zero,10000ab4 <__alt_mem_sdram_1+0xef800ab4>
10000acc:	38000126 	beq	r7,zero,10000ad4 <__divsi3+0x60>
10000ad0:	0085c83a 	sub	r2,zero,r2
10000ad4:	f800283a 	ret
10000ad8:	014bc83a 	sub	r5,zero,r5
10000adc:	39c0005c 	xori	r7,r7,1
10000ae0:	003fe706 	br	10000a80 <__alt_mem_sdram_1+0xef800a80>
10000ae4:	0109c83a 	sub	r4,zero,r4
10000ae8:	01c00044 	movi	r7,1
10000aec:	003fe306 	br	10000a7c <__alt_mem_sdram_1+0xef800a7c>
10000af0:	00c00044 	movi	r3,1
10000af4:	003fee06 	br	10000ab0 <__alt_mem_sdram_1+0xef800ab0>

10000af8 <__modsi3>:
10000af8:	20001716 	blt	r4,zero,10000b58 <__modsi3+0x60>
10000afc:	000f883a 	mov	r7,zero
10000b00:	2005883a 	mov	r2,r4
10000b04:	28001216 	blt	r5,zero,10000b50 <__modsi3+0x58>
10000b08:	2900162e 	bgeu	r5,r4,10000b64 <__modsi3+0x6c>
10000b0c:	01800804 	movi	r6,32
10000b10:	00c00044 	movi	r3,1
10000b14:	00000106 	br	10000b1c <__modsi3+0x24>
10000b18:	30000a26 	beq	r6,zero,10000b44 <__modsi3+0x4c>
10000b1c:	294b883a 	add	r5,r5,r5
10000b20:	31bfffc4 	addi	r6,r6,-1
10000b24:	18c7883a 	add	r3,r3,r3
10000b28:	293ffb36 	bltu	r5,r4,10000b18 <__alt_mem_sdram_1+0xef800b18>
10000b2c:	18000526 	beq	r3,zero,10000b44 <__modsi3+0x4c>
10000b30:	1806d07a 	srli	r3,r3,1
10000b34:	11400136 	bltu	r2,r5,10000b3c <__modsi3+0x44>
10000b38:	1145c83a 	sub	r2,r2,r5
10000b3c:	280ad07a 	srli	r5,r5,1
10000b40:	183ffb1e 	bne	r3,zero,10000b30 <__alt_mem_sdram_1+0xef800b30>
10000b44:	38000126 	beq	r7,zero,10000b4c <__modsi3+0x54>
10000b48:	0085c83a 	sub	r2,zero,r2
10000b4c:	f800283a 	ret
10000b50:	014bc83a 	sub	r5,zero,r5
10000b54:	003fec06 	br	10000b08 <__alt_mem_sdram_1+0xef800b08>
10000b58:	0109c83a 	sub	r4,zero,r4
10000b5c:	01c00044 	movi	r7,1
10000b60:	003fe706 	br	10000b00 <__alt_mem_sdram_1+0xef800b00>
10000b64:	00c00044 	movi	r3,1
10000b68:	003ff106 	br	10000b30 <__alt_mem_sdram_1+0xef800b30>

10000b6c <__udivsi3>:
10000b6c:	200d883a 	mov	r6,r4
10000b70:	2900152e 	bgeu	r5,r4,10000bc8 <__udivsi3+0x5c>
10000b74:	28001416 	blt	r5,zero,10000bc8 <__udivsi3+0x5c>
10000b78:	00800804 	movi	r2,32
10000b7c:	00c00044 	movi	r3,1
10000b80:	00000206 	br	10000b8c <__udivsi3+0x20>
10000b84:	10000e26 	beq	r2,zero,10000bc0 <__udivsi3+0x54>
10000b88:	28000516 	blt	r5,zero,10000ba0 <__udivsi3+0x34>
10000b8c:	294b883a 	add	r5,r5,r5
10000b90:	10bfffc4 	addi	r2,r2,-1
10000b94:	18c7883a 	add	r3,r3,r3
10000b98:	293ffa36 	bltu	r5,r4,10000b84 <__alt_mem_sdram_1+0xef800b84>
10000b9c:	18000826 	beq	r3,zero,10000bc0 <__udivsi3+0x54>
10000ba0:	0005883a 	mov	r2,zero
10000ba4:	31400236 	bltu	r6,r5,10000bb0 <__udivsi3+0x44>
10000ba8:	314dc83a 	sub	r6,r6,r5
10000bac:	10c4b03a 	or	r2,r2,r3
10000bb0:	1806d07a 	srli	r3,r3,1
10000bb4:	280ad07a 	srli	r5,r5,1
10000bb8:	183ffa1e 	bne	r3,zero,10000ba4 <__alt_mem_sdram_1+0xef800ba4>
10000bbc:	f800283a 	ret
10000bc0:	0005883a 	mov	r2,zero
10000bc4:	f800283a 	ret
10000bc8:	00c00044 	movi	r3,1
10000bcc:	003ff406 	br	10000ba0 <__alt_mem_sdram_1+0xef800ba0>

10000bd0 <__umodsi3>:
10000bd0:	2005883a 	mov	r2,r4
10000bd4:	2900122e 	bgeu	r5,r4,10000c20 <__umodsi3+0x50>
10000bd8:	28001116 	blt	r5,zero,10000c20 <__umodsi3+0x50>
10000bdc:	01800804 	movi	r6,32
10000be0:	00c00044 	movi	r3,1
10000be4:	00000206 	br	10000bf0 <__umodsi3+0x20>
10000be8:	30000c26 	beq	r6,zero,10000c1c <__umodsi3+0x4c>
10000bec:	28000516 	blt	r5,zero,10000c04 <__umodsi3+0x34>
10000bf0:	294b883a 	add	r5,r5,r5
10000bf4:	31bfffc4 	addi	r6,r6,-1
10000bf8:	18c7883a 	add	r3,r3,r3
10000bfc:	293ffa36 	bltu	r5,r4,10000be8 <__alt_mem_sdram_1+0xef800be8>
10000c00:	18000626 	beq	r3,zero,10000c1c <__umodsi3+0x4c>
10000c04:	1806d07a 	srli	r3,r3,1
10000c08:	11400136 	bltu	r2,r5,10000c10 <__umodsi3+0x40>
10000c0c:	1145c83a 	sub	r2,r2,r5
10000c10:	280ad07a 	srli	r5,r5,1
10000c14:	183ffb1e 	bne	r3,zero,10000c04 <__alt_mem_sdram_1+0xef800c04>
10000c18:	f800283a 	ret
10000c1c:	f800283a 	ret
10000c20:	00c00044 	movi	r3,1
10000c24:	003ff706 	br	10000c04 <__alt_mem_sdram_1+0xef800c04>

10000c28 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10000c28:	defffc04 	addi	sp,sp,-16
10000c2c:	df000315 	stw	fp,12(sp)
10000c30:	df000304 	addi	fp,sp,12
10000c34:	e13ffd15 	stw	r4,-12(fp)
10000c38:	e17ffe15 	stw	r5,-8(fp)
10000c3c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10000c40:	e0fffe17 	ldw	r3,-8(fp)
10000c44:	e0bffd17 	ldw	r2,-12(fp)
10000c48:	18800c26 	beq	r3,r2,10000c7c <alt_load_section+0x54>
  {
    while( to != end )
10000c4c:	00000806 	br	10000c70 <alt_load_section+0x48>
    {
      *to++ = *from++;
10000c50:	e0bffe17 	ldw	r2,-8(fp)
10000c54:	10c00104 	addi	r3,r2,4
10000c58:	e0fffe15 	stw	r3,-8(fp)
10000c5c:	e0fffd17 	ldw	r3,-12(fp)
10000c60:	19000104 	addi	r4,r3,4
10000c64:	e13ffd15 	stw	r4,-12(fp)
10000c68:	18c00017 	ldw	r3,0(r3)
10000c6c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10000c70:	e0fffe17 	ldw	r3,-8(fp)
10000c74:	e0bfff17 	ldw	r2,-4(fp)
10000c78:	18bff51e 	bne	r3,r2,10000c50 <__alt_mem_sdram_1+0xef800c50>
    {
      *to++ = *from++;
    }
  }
}
10000c7c:	0001883a 	nop
10000c80:	e037883a 	mov	sp,fp
10000c84:	df000017 	ldw	fp,0(sp)
10000c88:	dec00104 	addi	sp,sp,4
10000c8c:	f800283a 	ret

10000c90 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10000c90:	defffe04 	addi	sp,sp,-8
10000c94:	dfc00115 	stw	ra,4(sp)
10000c98:	df000015 	stw	fp,0(sp)
10000c9c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10000ca0:	01840034 	movhi	r6,4096
10000ca4:	3187bd04 	addi	r6,r6,7924
10000ca8:	01440034 	movhi	r5,4096
10000cac:	29470804 	addi	r5,r5,7200
10000cb0:	01040034 	movhi	r4,4096
10000cb4:	21070804 	addi	r4,r4,7200
10000cb8:	0000c280 	call	10000c28 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10000cbc:	01840034 	movhi	r6,4096
10000cc0:	31800804 	addi	r6,r6,32
10000cc4:	01440034 	movhi	r5,4096
10000cc8:	29400804 	addi	r5,r5,32
10000ccc:	01040034 	movhi	r4,4096
10000cd0:	21000804 	addi	r4,r4,32
10000cd4:	0000c280 	call	10000c28 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10000cd8:	01840034 	movhi	r6,4096
10000cdc:	31870804 	addi	r6,r6,7200
10000ce0:	01440034 	movhi	r5,4096
10000ce4:	2946df04 	addi	r5,r5,7036
10000ce8:	01040034 	movhi	r4,4096
10000cec:	2106df04 	addi	r4,r4,7036
10000cf0:	0000c280 	call	10000c28 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10000cf4:	00012a80 	call	100012a8 <alt_dcache_flush_all>
  alt_icache_flush_all();
10000cf8:	00014300 	call	10001430 <alt_icache_flush_all>
}
10000cfc:	0001883a 	nop
10000d00:	e037883a 	mov	sp,fp
10000d04:	dfc00117 	ldw	ra,4(sp)
10000d08:	df000017 	ldw	fp,0(sp)
10000d0c:	dec00204 	addi	sp,sp,8
10000d10:	f800283a 	ret

10000d14 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10000d14:	defffd04 	addi	sp,sp,-12
10000d18:	dfc00215 	stw	ra,8(sp)
10000d1c:	df000115 	stw	fp,4(sp)
10000d20:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10000d24:	0009883a 	mov	r4,zero
10000d28:	0000ee80 	call	10000ee8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10000d2c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10000d30:	0000f200 	call	10000f20 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10000d34:	01840034 	movhi	r6,4096
10000d38:	3186fb04 	addi	r6,r6,7148
10000d3c:	01440034 	movhi	r5,4096
10000d40:	2946fb04 	addi	r5,r5,7148
10000d44:	01040034 	movhi	r4,4096
10000d48:	2106fb04 	addi	r4,r4,7148
10000d4c:	00015280 	call	10001528 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10000d50:	d0a00917 	ldw	r2,-32732(gp)
10000d54:	d0e00a17 	ldw	r3,-32728(gp)
10000d58:	d1200b17 	ldw	r4,-32724(gp)
10000d5c:	200d883a 	mov	r6,r4
10000d60:	180b883a 	mov	r5,r3
10000d64:	1009883a 	mov	r4,r2
10000d68:	00002200 	call	10000220 <main>
10000d6c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10000d70:	01000044 	movi	r4,1
10000d74:	00011d80 	call	100011d8 <close>
  exit (result);
10000d78:	e13fff17 	ldw	r4,-4(fp)
10000d7c:	00013fc0 	call	100013fc <_exit>

10000d80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10000d80:	defffe04 	addi	sp,sp,-8
10000d84:	dfc00115 	stw	ra,4(sp)
10000d88:	df000015 	stw	fp,0(sp)
10000d8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10000d90:	d0a00717 	ldw	r2,-32740(gp)
10000d94:	10000326 	beq	r2,zero,10000da4 <alt_get_errno+0x24>
10000d98:	d0a00717 	ldw	r2,-32740(gp)
10000d9c:	103ee83a 	callr	r2
10000da0:	00000106 	br	10000da8 <alt_get_errno+0x28>
10000da4:	d0a00804 	addi	r2,gp,-32736
}
10000da8:	e037883a 	mov	sp,fp
10000dac:	dfc00117 	ldw	ra,4(sp)
10000db0:	df000017 	ldw	fp,0(sp)
10000db4:	dec00204 	addi	sp,sp,8
10000db8:	f800283a 	ret

10000dbc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10000dbc:	defff904 	addi	sp,sp,-28
10000dc0:	dfc00615 	stw	ra,24(sp)
10000dc4:	df000515 	stw	fp,20(sp)
10000dc8:	df000504 	addi	fp,sp,20
10000dcc:	e13ffd15 	stw	r4,-12(fp)
10000dd0:	e17ffe15 	stw	r5,-8(fp)
10000dd4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10000dd8:	e0bffd17 	ldw	r2,-12(fp)
10000ddc:	10000616 	blt	r2,zero,10000df8 <write+0x3c>
10000de0:	e0bffd17 	ldw	r2,-12(fp)
10000de4:	10c00324 	muli	r3,r2,12
10000de8:	00840034 	movhi	r2,4096
10000dec:	10875504 	addi	r2,r2,7508
10000df0:	1885883a 	add	r2,r3,r2
10000df4:	00000106 	br	10000dfc <write+0x40>
10000df8:	0005883a 	mov	r2,zero
10000dfc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10000e00:	e0bffb17 	ldw	r2,-20(fp)
10000e04:	10002126 	beq	r2,zero,10000e8c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10000e08:	e0bffb17 	ldw	r2,-20(fp)
10000e0c:	10800217 	ldw	r2,8(r2)
10000e10:	108000cc 	andi	r2,r2,3
10000e14:	10001826 	beq	r2,zero,10000e78 <write+0xbc>
10000e18:	e0bffb17 	ldw	r2,-20(fp)
10000e1c:	10800017 	ldw	r2,0(r2)
10000e20:	10800617 	ldw	r2,24(r2)
10000e24:	10001426 	beq	r2,zero,10000e78 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10000e28:	e0bffb17 	ldw	r2,-20(fp)
10000e2c:	10800017 	ldw	r2,0(r2)
10000e30:	10800617 	ldw	r2,24(r2)
10000e34:	e0ffff17 	ldw	r3,-4(fp)
10000e38:	180d883a 	mov	r6,r3
10000e3c:	e17ffe17 	ldw	r5,-8(fp)
10000e40:	e13ffb17 	ldw	r4,-20(fp)
10000e44:	103ee83a 	callr	r2
10000e48:	e0bffc15 	stw	r2,-16(fp)
10000e4c:	e0bffc17 	ldw	r2,-16(fp)
10000e50:	1000070e 	bge	r2,zero,10000e70 <write+0xb4>
      {
        ALT_ERRNO = -rval;
10000e54:	0000d800 	call	10000d80 <alt_get_errno>
10000e58:	1007883a 	mov	r3,r2
10000e5c:	e0bffc17 	ldw	r2,-16(fp)
10000e60:	0085c83a 	sub	r2,zero,r2
10000e64:	18800015 	stw	r2,0(r3)
        return -1;
10000e68:	00bfffc4 	movi	r2,-1
10000e6c:	00000c06 	br	10000ea0 <write+0xe4>
      }
      return rval;
10000e70:	e0bffc17 	ldw	r2,-16(fp)
10000e74:	00000a06 	br	10000ea0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
10000e78:	0000d800 	call	10000d80 <alt_get_errno>
10000e7c:	1007883a 	mov	r3,r2
10000e80:	00800344 	movi	r2,13
10000e84:	18800015 	stw	r2,0(r3)
10000e88:	00000406 	br	10000e9c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10000e8c:	0000d800 	call	10000d80 <alt_get_errno>
10000e90:	1007883a 	mov	r3,r2
10000e94:	00801444 	movi	r2,81
10000e98:	18800015 	stw	r2,0(r3)
  }
  return -1;
10000e9c:	00bfffc4 	movi	r2,-1
}
10000ea0:	e037883a 	mov	sp,fp
10000ea4:	dfc00117 	ldw	ra,4(sp)
10000ea8:	df000017 	ldw	fp,0(sp)
10000eac:	dec00204 	addi	sp,sp,8
10000eb0:	f800283a 	ret

10000eb4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10000eb4:	defffd04 	addi	sp,sp,-12
10000eb8:	dfc00215 	stw	ra,8(sp)
10000ebc:	df000115 	stw	fp,4(sp)
10000ec0:	df000104 	addi	fp,sp,4
10000ec4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10000ec8:	d1600404 	addi	r5,gp,-32752
10000ecc:	e13fff17 	ldw	r4,-4(fp)
10000ed0:	00013580 	call	10001358 <alt_dev_llist_insert>
}
10000ed4:	e037883a 	mov	sp,fp
10000ed8:	dfc00117 	ldw	ra,4(sp)
10000edc:	df000017 	ldw	fp,0(sp)
10000ee0:	dec00204 	addi	sp,sp,8
10000ee4:	f800283a 	ret

10000ee8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10000ee8:	defffd04 	addi	sp,sp,-12
10000eec:	dfc00215 	stw	ra,8(sp)
10000ef0:	df000115 	stw	fp,4(sp)
10000ef4:	df000104 	addi	fp,sp,4
10000ef8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
10000efc:	000185c0 	call	1000185c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10000f00:	00800044 	movi	r2,1
10000f04:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10000f08:	0001883a 	nop
10000f0c:	e037883a 	mov	sp,fp
10000f10:	dfc00117 	ldw	ra,4(sp)
10000f14:	df000017 	ldw	fp,0(sp)
10000f18:	dec00204 	addi	sp,sp,8
10000f1c:	f800283a 	ret

10000f20 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10000f20:	defffe04 	addi	sp,sp,-8
10000f24:	dfc00115 	stw	ra,4(sp)
10000f28:	df000015 	stw	fp,0(sp)
10000f2c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
10000f30:	0001883a 	nop
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10000f34:	01040034 	movhi	r4,4096
10000f38:	21074004 	addi	r4,r4,7424
10000f3c:	0000eb40 	call	10000eb4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10000f40:	0001883a 	nop
}
10000f44:	0001883a 	nop
10000f48:	e037883a 	mov	sp,fp
10000f4c:	dfc00117 	ldw	ra,4(sp)
10000f50:	df000017 	ldw	fp,0(sp)
10000f54:	dec00204 	addi	sp,sp,8
10000f58:	f800283a 	ret

10000f5c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10000f5c:	defffa04 	addi	sp,sp,-24
10000f60:	dfc00515 	stw	ra,20(sp)
10000f64:	df000415 	stw	fp,16(sp)
10000f68:	df000404 	addi	fp,sp,16
10000f6c:	e13ffd15 	stw	r4,-12(fp)
10000f70:	e17ffe15 	stw	r5,-8(fp)
10000f74:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10000f78:	e0bffd17 	ldw	r2,-12(fp)
10000f7c:	10800017 	ldw	r2,0(r2)
10000f80:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10000f84:	e0bffc17 	ldw	r2,-16(fp)
10000f88:	10c00a04 	addi	r3,r2,40
10000f8c:	e0bffd17 	ldw	r2,-12(fp)
10000f90:	10800217 	ldw	r2,8(r2)
10000f94:	100f883a 	mov	r7,r2
10000f98:	e1bfff17 	ldw	r6,-4(fp)
10000f9c:	e17ffe17 	ldw	r5,-8(fp)
10000fa0:	1809883a 	mov	r4,r3
10000fa4:	000101c0 	call	1000101c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10000fa8:	e037883a 	mov	sp,fp
10000fac:	dfc00117 	ldw	ra,4(sp)
10000fb0:	df000017 	ldw	fp,0(sp)
10000fb4:	dec00204 	addi	sp,sp,8
10000fb8:	f800283a 	ret

10000fbc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10000fbc:	defffa04 	addi	sp,sp,-24
10000fc0:	dfc00515 	stw	ra,20(sp)
10000fc4:	df000415 	stw	fp,16(sp)
10000fc8:	df000404 	addi	fp,sp,16
10000fcc:	e13ffd15 	stw	r4,-12(fp)
10000fd0:	e17ffe15 	stw	r5,-8(fp)
10000fd4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10000fd8:	e0bffd17 	ldw	r2,-12(fp)
10000fdc:	10800017 	ldw	r2,0(r2)
10000fe0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10000fe4:	e0bffc17 	ldw	r2,-16(fp)
10000fe8:	10c00a04 	addi	r3,r2,40
10000fec:	e0bffd17 	ldw	r2,-12(fp)
10000ff0:	10800217 	ldw	r2,8(r2)
10000ff4:	100f883a 	mov	r7,r2
10000ff8:	e1bfff17 	ldw	r6,-4(fp)
10000ffc:	e17ffe17 	ldw	r5,-8(fp)
10001000:	1809883a 	mov	r4,r3
10001004:	00011080 	call	10001108 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10001008:	e037883a 	mov	sp,fp
1000100c:	dfc00117 	ldw	ra,4(sp)
10001010:	df000017 	ldw	fp,0(sp)
10001014:	dec00204 	addi	sp,sp,8
10001018:	f800283a 	ret

1000101c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
1000101c:	defff704 	addi	sp,sp,-36
10001020:	df000815 	stw	fp,32(sp)
10001024:	df000804 	addi	fp,sp,32
10001028:	e13ffc15 	stw	r4,-16(fp)
1000102c:	e17ffd15 	stw	r5,-12(fp)
10001030:	e1bffe15 	stw	r6,-8(fp)
10001034:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
10001038:	e0bffc17 	ldw	r2,-16(fp)
1000103c:	10800017 	ldw	r2,0(r2)
10001040:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
10001044:	e0bffd17 	ldw	r2,-12(fp)
10001048:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
1000104c:	e0bffe17 	ldw	r2,-8(fp)
10001050:	e0fffd17 	ldw	r3,-12(fp)
10001054:	1885883a 	add	r2,r3,r2
10001058:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
1000105c:	00001206 	br	100010a8 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10001060:	e0bff917 	ldw	r2,-28(fp)
10001064:	10800037 	ldwio	r2,0(r2)
10001068:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
1000106c:	e0bffb17 	ldw	r2,-20(fp)
10001070:	10a0000c 	andi	r2,r2,32768
10001074:	10000626 	beq	r2,zero,10001090 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10001078:	e0bff817 	ldw	r2,-32(fp)
1000107c:	10c00044 	addi	r3,r2,1
10001080:	e0fff815 	stw	r3,-32(fp)
10001084:	e0fffb17 	ldw	r3,-20(fp)
10001088:	10c00005 	stb	r3,0(r2)
1000108c:	00000606 	br	100010a8 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
10001090:	e0fff817 	ldw	r3,-32(fp)
10001094:	e0bffd17 	ldw	r2,-12(fp)
10001098:	1880071e 	bne	r3,r2,100010b8 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
1000109c:	e0bfff17 	ldw	r2,-4(fp)
100010a0:	1090000c 	andi	r2,r2,16384
100010a4:	1000061e 	bne	r2,zero,100010c0 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
100010a8:	e0fff817 	ldw	r3,-32(fp)
100010ac:	e0bffa17 	ldw	r2,-24(fp)
100010b0:	18bfeb36 	bltu	r3,r2,10001060 <__alt_mem_sdram_1+0xef801060>
100010b4:	00000306 	br	100010c4 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
100010b8:	0001883a 	nop
100010bc:	00000106 	br	100010c4 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
100010c0:	0001883a 	nop
    
  }

  if (ptr != buffer)
100010c4:	e0fff817 	ldw	r3,-32(fp)
100010c8:	e0bffd17 	ldw	r2,-12(fp)
100010cc:	18800426 	beq	r3,r2,100010e0 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
100010d0:	e0fff817 	ldw	r3,-32(fp)
100010d4:	e0bffd17 	ldw	r2,-12(fp)
100010d8:	1885c83a 	sub	r2,r3,r2
100010dc:	00000606 	br	100010f8 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
100010e0:	e0bfff17 	ldw	r2,-4(fp)
100010e4:	1090000c 	andi	r2,r2,16384
100010e8:	10000226 	beq	r2,zero,100010f4 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
100010ec:	00bffd44 	movi	r2,-11
100010f0:	00000106 	br	100010f8 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
100010f4:	00bffec4 	movi	r2,-5
}
100010f8:	e037883a 	mov	sp,fp
100010fc:	df000017 	ldw	fp,0(sp)
10001100:	dec00104 	addi	sp,sp,4
10001104:	f800283a 	ret

10001108 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10001108:	defff904 	addi	sp,sp,-28
1000110c:	df000615 	stw	fp,24(sp)
10001110:	df000604 	addi	fp,sp,24
10001114:	e13ffc15 	stw	r4,-16(fp)
10001118:	e17ffd15 	stw	r5,-12(fp)
1000111c:	e1bffe15 	stw	r6,-8(fp)
10001120:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
10001124:	e0bffc17 	ldw	r2,-16(fp)
10001128:	10800017 	ldw	r2,0(r2)
1000112c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
10001130:	e0bffe17 	ldw	r2,-8(fp)
10001134:	e0fffd17 	ldw	r3,-12(fp)
10001138:	1885883a 	add	r2,r3,r2
1000113c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
10001140:	00000e06 	br	1000117c <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
10001144:	e0bffa17 	ldw	r2,-24(fp)
10001148:	10800104 	addi	r2,r2,4
1000114c:	10800037 	ldwio	r2,0(r2)
10001150:	10bfffec 	andhi	r2,r2,65535
10001154:	10000926 	beq	r2,zero,1000117c <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
10001158:	e0fffa17 	ldw	r3,-24(fp)
1000115c:	e0bffd17 	ldw	r2,-12(fp)
10001160:	11000044 	addi	r4,r2,1
10001164:	e13ffd15 	stw	r4,-12(fp)
10001168:	10800003 	ldbu	r2,0(r2)
1000116c:	10803fcc 	andi	r2,r2,255
10001170:	1080201c 	xori	r2,r2,128
10001174:	10bfe004 	addi	r2,r2,-128
10001178:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
1000117c:	e0fffd17 	ldw	r3,-12(fp)
10001180:	e0bffb17 	ldw	r2,-20(fp)
10001184:	18bfef36 	bltu	r3,r2,10001144 <__alt_mem_sdram_1+0xef801144>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
10001188:	e0bffe17 	ldw	r2,-8(fp)
}
1000118c:	e037883a 	mov	sp,fp
10001190:	df000017 	ldw	fp,0(sp)
10001194:	dec00104 	addi	sp,sp,4
10001198:	f800283a 	ret

1000119c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000119c:	defffe04 	addi	sp,sp,-8
100011a0:	dfc00115 	stw	ra,4(sp)
100011a4:	df000015 	stw	fp,0(sp)
100011a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100011ac:	d0a00717 	ldw	r2,-32740(gp)
100011b0:	10000326 	beq	r2,zero,100011c0 <alt_get_errno+0x24>
100011b4:	d0a00717 	ldw	r2,-32740(gp)
100011b8:	103ee83a 	callr	r2
100011bc:	00000106 	br	100011c4 <alt_get_errno+0x28>
100011c0:	d0a00804 	addi	r2,gp,-32736
}
100011c4:	e037883a 	mov	sp,fp
100011c8:	dfc00117 	ldw	ra,4(sp)
100011cc:	df000017 	ldw	fp,0(sp)
100011d0:	dec00204 	addi	sp,sp,8
100011d4:	f800283a 	ret

100011d8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
100011d8:	defffb04 	addi	sp,sp,-20
100011dc:	dfc00415 	stw	ra,16(sp)
100011e0:	df000315 	stw	fp,12(sp)
100011e4:	df000304 	addi	fp,sp,12
100011e8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
100011ec:	e0bfff17 	ldw	r2,-4(fp)
100011f0:	10000616 	blt	r2,zero,1000120c <close+0x34>
100011f4:	e0bfff17 	ldw	r2,-4(fp)
100011f8:	10c00324 	muli	r3,r2,12
100011fc:	00840034 	movhi	r2,4096
10001200:	10875504 	addi	r2,r2,7508
10001204:	1885883a 	add	r2,r3,r2
10001208:	00000106 	br	10001210 <close+0x38>
1000120c:	0005883a 	mov	r2,zero
10001210:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10001214:	e0bffd17 	ldw	r2,-12(fp)
10001218:	10001926 	beq	r2,zero,10001280 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000121c:	e0bffd17 	ldw	r2,-12(fp)
10001220:	10800017 	ldw	r2,0(r2)
10001224:	10800417 	ldw	r2,16(r2)
10001228:	10000626 	beq	r2,zero,10001244 <close+0x6c>
1000122c:	e0bffd17 	ldw	r2,-12(fp)
10001230:	10800017 	ldw	r2,0(r2)
10001234:	10800417 	ldw	r2,16(r2)
10001238:	e13ffd17 	ldw	r4,-12(fp)
1000123c:	103ee83a 	callr	r2
10001240:	00000106 	br	10001248 <close+0x70>
10001244:	0005883a 	mov	r2,zero
10001248:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000124c:	e13fff17 	ldw	r4,-4(fp)
10001250:	00017f80 	call	100017f8 <alt_release_fd>
    if (rval < 0)
10001254:	e0bffe17 	ldw	r2,-8(fp)
10001258:	1000070e 	bge	r2,zero,10001278 <close+0xa0>
    {
      ALT_ERRNO = -rval;
1000125c:	000119c0 	call	1000119c <alt_get_errno>
10001260:	1007883a 	mov	r3,r2
10001264:	e0bffe17 	ldw	r2,-8(fp)
10001268:	0085c83a 	sub	r2,zero,r2
1000126c:	18800015 	stw	r2,0(r3)
      return -1;
10001270:	00bfffc4 	movi	r2,-1
10001274:	00000706 	br	10001294 <close+0xbc>
    }
    return 0;
10001278:	0005883a 	mov	r2,zero
1000127c:	00000506 	br	10001294 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10001280:	000119c0 	call	1000119c <alt_get_errno>
10001284:	1007883a 	mov	r3,r2
10001288:	00801444 	movi	r2,81
1000128c:	18800015 	stw	r2,0(r3)
    return -1;
10001290:	00bfffc4 	movi	r2,-1
  }
}
10001294:	e037883a 	mov	sp,fp
10001298:	dfc00117 	ldw	ra,4(sp)
1000129c:	df000017 	ldw	fp,0(sp)
100012a0:	dec00204 	addi	sp,sp,8
100012a4:	f800283a 	ret

100012a8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100012a8:	defffe04 	addi	sp,sp,-8
100012ac:	df000115 	stw	fp,4(sp)
100012b0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
100012b4:	e03fff15 	stw	zero,-4(fp)
100012b8:	00000506 	br	100012d0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
100012bc:	e0bfff17 	ldw	r2,-4(fp)
100012c0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
100012c4:	e0bfff17 	ldw	r2,-4(fp)
100012c8:	10800804 	addi	r2,r2,32
100012cc:	e0bfff15 	stw	r2,-4(fp)
100012d0:	e0bfff17 	ldw	r2,-4(fp)
100012d4:	10820030 	cmpltui	r2,r2,2048
100012d8:	103ff81e 	bne	r2,zero,100012bc <__alt_mem_sdram_1+0xef8012bc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100012dc:	0001883a 	nop
100012e0:	e037883a 	mov	sp,fp
100012e4:	df000017 	ldw	fp,0(sp)
100012e8:	dec00104 	addi	sp,sp,4
100012ec:	f800283a 	ret

100012f0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
100012f0:	defffc04 	addi	sp,sp,-16
100012f4:	df000315 	stw	fp,12(sp)
100012f8:	df000304 	addi	fp,sp,12
100012fc:	e13ffd15 	stw	r4,-12(fp)
10001300:	e17ffe15 	stw	r5,-8(fp)
10001304:	e1bfff15 	stw	r6,-4(fp)
  return len;
10001308:	e0bfff17 	ldw	r2,-4(fp)
}
1000130c:	e037883a 	mov	sp,fp
10001310:	df000017 	ldw	fp,0(sp)
10001314:	dec00104 	addi	sp,sp,4
10001318:	f800283a 	ret

1000131c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000131c:	defffe04 	addi	sp,sp,-8
10001320:	dfc00115 	stw	ra,4(sp)
10001324:	df000015 	stw	fp,0(sp)
10001328:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000132c:	d0a00717 	ldw	r2,-32740(gp)
10001330:	10000326 	beq	r2,zero,10001340 <alt_get_errno+0x24>
10001334:	d0a00717 	ldw	r2,-32740(gp)
10001338:	103ee83a 	callr	r2
1000133c:	00000106 	br	10001344 <alt_get_errno+0x28>
10001340:	d0a00804 	addi	r2,gp,-32736
}
10001344:	e037883a 	mov	sp,fp
10001348:	dfc00117 	ldw	ra,4(sp)
1000134c:	df000017 	ldw	fp,0(sp)
10001350:	dec00204 	addi	sp,sp,8
10001354:	f800283a 	ret

10001358 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10001358:	defffa04 	addi	sp,sp,-24
1000135c:	dfc00515 	stw	ra,20(sp)
10001360:	df000415 	stw	fp,16(sp)
10001364:	df000404 	addi	fp,sp,16
10001368:	e13ffe15 	stw	r4,-8(fp)
1000136c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10001370:	e0bffe17 	ldw	r2,-8(fp)
10001374:	10000326 	beq	r2,zero,10001384 <alt_dev_llist_insert+0x2c>
10001378:	e0bffe17 	ldw	r2,-8(fp)
1000137c:	10800217 	ldw	r2,8(r2)
10001380:	1000061e 	bne	r2,zero,1000139c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10001384:	000131c0 	call	1000131c <alt_get_errno>
10001388:	1007883a 	mov	r3,r2
1000138c:	00800584 	movi	r2,22
10001390:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10001394:	00bffa84 	movi	r2,-22
10001398:	00001306 	br	100013e8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1000139c:	e0bffe17 	ldw	r2,-8(fp)
100013a0:	e0ffff17 	ldw	r3,-4(fp)
100013a4:	e0fffc15 	stw	r3,-16(fp)
100013a8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100013ac:	e0bffd17 	ldw	r2,-12(fp)
100013b0:	e0fffc17 	ldw	r3,-16(fp)
100013b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100013b8:	e0bffc17 	ldw	r2,-16(fp)
100013bc:	10c00017 	ldw	r3,0(r2)
100013c0:	e0bffd17 	ldw	r2,-12(fp)
100013c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100013c8:	e0bffc17 	ldw	r2,-16(fp)
100013cc:	10800017 	ldw	r2,0(r2)
100013d0:	e0fffd17 	ldw	r3,-12(fp)
100013d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100013d8:	e0bffc17 	ldw	r2,-16(fp)
100013dc:	e0fffd17 	ldw	r3,-12(fp)
100013e0:	10c00015 	stw	r3,0(r2)

  return 0;  
100013e4:	0005883a 	mov	r2,zero
}
100013e8:	e037883a 	mov	sp,fp
100013ec:	dfc00117 	ldw	ra,4(sp)
100013f0:	df000017 	ldw	fp,0(sp)
100013f4:	dec00204 	addi	sp,sp,8
100013f8:	f800283a 	ret

100013fc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100013fc:	defffd04 	addi	sp,sp,-12
10001400:	df000215 	stw	fp,8(sp)
10001404:	df000204 	addi	fp,sp,8
10001408:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1000140c:	0001883a 	nop
10001410:	e0bfff17 	ldw	r2,-4(fp)
10001414:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10001418:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1000141c:	10000226 	beq	r2,zero,10001428 <_exit+0x2c>
    ALT_SIM_FAIL();
10001420:	002af070 	cmpltui	zero,zero,43969
10001424:	00000106 	br	1000142c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10001428:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1000142c:	003fff06 	br	1000142c <__alt_mem_sdram_1+0xef80142c>

10001430 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10001430:	defffe04 	addi	sp,sp,-8
10001434:	dfc00115 	stw	ra,4(sp)
10001438:	df000015 	stw	fp,0(sp)
1000143c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
10001440:	01440004 	movi	r5,4096
10001444:	0009883a 	mov	r4,zero
10001448:	0001abc0 	call	10001abc <alt_icache_flush>
#endif
}
1000144c:	0001883a 	nop
10001450:	e037883a 	mov	sp,fp
10001454:	dfc00117 	ldw	ra,4(sp)
10001458:	df000017 	ldw	fp,0(sp)
1000145c:	dec00204 	addi	sp,sp,8
10001460:	f800283a 	ret

10001464 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10001464:	defff904 	addi	sp,sp,-28
10001468:	dfc00615 	stw	ra,24(sp)
1000146c:	df000515 	stw	fp,20(sp)
10001470:	df000504 	addi	fp,sp,20
10001474:	e13ffc15 	stw	r4,-16(fp)
10001478:	e17ffd15 	stw	r5,-12(fp)
1000147c:	e1bffe15 	stw	r6,-8(fp)
10001480:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
10001484:	e1bfff17 	ldw	r6,-4(fp)
10001488:	e17ffe17 	ldw	r5,-8(fp)
1000148c:	e13ffd17 	ldw	r4,-12(fp)
10001490:	00016a40 	call	100016a4 <open>
10001494:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
10001498:	e0bffb17 	ldw	r2,-20(fp)
1000149c:	10001c16 	blt	r2,zero,10001510 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
100014a0:	00840034 	movhi	r2,4096
100014a4:	10875504 	addi	r2,r2,7508
100014a8:	e0fffb17 	ldw	r3,-20(fp)
100014ac:	18c00324 	muli	r3,r3,12
100014b0:	10c5883a 	add	r2,r2,r3
100014b4:	10c00017 	ldw	r3,0(r2)
100014b8:	e0bffc17 	ldw	r2,-16(fp)
100014bc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100014c0:	00840034 	movhi	r2,4096
100014c4:	10875504 	addi	r2,r2,7508
100014c8:	e0fffb17 	ldw	r3,-20(fp)
100014cc:	18c00324 	muli	r3,r3,12
100014d0:	10c5883a 	add	r2,r2,r3
100014d4:	10800104 	addi	r2,r2,4
100014d8:	10c00017 	ldw	r3,0(r2)
100014dc:	e0bffc17 	ldw	r2,-16(fp)
100014e0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
100014e4:	00840034 	movhi	r2,4096
100014e8:	10875504 	addi	r2,r2,7508
100014ec:	e0fffb17 	ldw	r3,-20(fp)
100014f0:	18c00324 	muli	r3,r3,12
100014f4:	10c5883a 	add	r2,r2,r3
100014f8:	10800204 	addi	r2,r2,8
100014fc:	10c00017 	ldw	r3,0(r2)
10001500:	e0bffc17 	ldw	r2,-16(fp)
10001504:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10001508:	e13ffb17 	ldw	r4,-20(fp)
1000150c:	00017f80 	call	100017f8 <alt_release_fd>
  }
} 
10001510:	0001883a 	nop
10001514:	e037883a 	mov	sp,fp
10001518:	dfc00117 	ldw	ra,4(sp)
1000151c:	df000017 	ldw	fp,0(sp)
10001520:	dec00204 	addi	sp,sp,8
10001524:	f800283a 	ret

10001528 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10001528:	defffb04 	addi	sp,sp,-20
1000152c:	dfc00415 	stw	ra,16(sp)
10001530:	df000315 	stw	fp,12(sp)
10001534:	df000304 	addi	fp,sp,12
10001538:	e13ffd15 	stw	r4,-12(fp)
1000153c:	e17ffe15 	stw	r5,-8(fp)
10001540:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10001544:	01c07fc4 	movi	r7,511
10001548:	01800044 	movi	r6,1
1000154c:	e17ffd17 	ldw	r5,-12(fp)
10001550:	01040034 	movhi	r4,4096
10001554:	21075804 	addi	r4,r4,7520
10001558:	00014640 	call	10001464 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1000155c:	01c07fc4 	movi	r7,511
10001560:	000d883a 	mov	r6,zero
10001564:	e17ffe17 	ldw	r5,-8(fp)
10001568:	01040034 	movhi	r4,4096
1000156c:	21075504 	addi	r4,r4,7508
10001570:	00014640 	call	10001464 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10001574:	01c07fc4 	movi	r7,511
10001578:	01800044 	movi	r6,1
1000157c:	e17fff17 	ldw	r5,-4(fp)
10001580:	01040034 	movhi	r4,4096
10001584:	21075b04 	addi	r4,r4,7532
10001588:	00014640 	call	10001464 <alt_open_fd>
}  
1000158c:	0001883a 	nop
10001590:	e037883a 	mov	sp,fp
10001594:	dfc00117 	ldw	ra,4(sp)
10001598:	df000017 	ldw	fp,0(sp)
1000159c:	dec00204 	addi	sp,sp,8
100015a0:	f800283a 	ret

100015a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100015a4:	defffe04 	addi	sp,sp,-8
100015a8:	dfc00115 	stw	ra,4(sp)
100015ac:	df000015 	stw	fp,0(sp)
100015b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100015b4:	d0a00717 	ldw	r2,-32740(gp)
100015b8:	10000326 	beq	r2,zero,100015c8 <alt_get_errno+0x24>
100015bc:	d0a00717 	ldw	r2,-32740(gp)
100015c0:	103ee83a 	callr	r2
100015c4:	00000106 	br	100015cc <alt_get_errno+0x28>
100015c8:	d0a00804 	addi	r2,gp,-32736
}
100015cc:	e037883a 	mov	sp,fp
100015d0:	dfc00117 	ldw	ra,4(sp)
100015d4:	df000017 	ldw	fp,0(sp)
100015d8:	dec00204 	addi	sp,sp,8
100015dc:	f800283a 	ret

100015e0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
100015e0:	defffd04 	addi	sp,sp,-12
100015e4:	df000215 	stw	fp,8(sp)
100015e8:	df000204 	addi	fp,sp,8
100015ec:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100015f0:	e0bfff17 	ldw	r2,-4(fp)
100015f4:	10800217 	ldw	r2,8(r2)
100015f8:	10d00034 	orhi	r3,r2,16384
100015fc:	e0bfff17 	ldw	r2,-4(fp)
10001600:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10001604:	e03ffe15 	stw	zero,-8(fp)
10001608:	00001d06 	br	10001680 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000160c:	00840034 	movhi	r2,4096
10001610:	10875504 	addi	r2,r2,7508
10001614:	e0fffe17 	ldw	r3,-8(fp)
10001618:	18c00324 	muli	r3,r3,12
1000161c:	10c5883a 	add	r2,r2,r3
10001620:	10c00017 	ldw	r3,0(r2)
10001624:	e0bfff17 	ldw	r2,-4(fp)
10001628:	10800017 	ldw	r2,0(r2)
1000162c:	1880111e 	bne	r3,r2,10001674 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10001630:	00840034 	movhi	r2,4096
10001634:	10875504 	addi	r2,r2,7508
10001638:	e0fffe17 	ldw	r3,-8(fp)
1000163c:	18c00324 	muli	r3,r3,12
10001640:	10c5883a 	add	r2,r2,r3
10001644:	10800204 	addi	r2,r2,8
10001648:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000164c:	1000090e 	bge	r2,zero,10001674 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10001650:	e0bffe17 	ldw	r2,-8(fp)
10001654:	10c00324 	muli	r3,r2,12
10001658:	00840034 	movhi	r2,4096
1000165c:	10875504 	addi	r2,r2,7508
10001660:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10001664:	e0bfff17 	ldw	r2,-4(fp)
10001668:	18800226 	beq	r3,r2,10001674 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1000166c:	00bffcc4 	movi	r2,-13
10001670:	00000806 	br	10001694 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10001674:	e0bffe17 	ldw	r2,-8(fp)
10001678:	10800044 	addi	r2,r2,1
1000167c:	e0bffe15 	stw	r2,-8(fp)
10001680:	d0a00617 	ldw	r2,-32744(gp)
10001684:	1007883a 	mov	r3,r2
10001688:	e0bffe17 	ldw	r2,-8(fp)
1000168c:	18bfdf2e 	bgeu	r3,r2,1000160c <__alt_mem_sdram_1+0xef80160c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10001690:	0005883a 	mov	r2,zero
}
10001694:	e037883a 	mov	sp,fp
10001698:	df000017 	ldw	fp,0(sp)
1000169c:	dec00104 	addi	sp,sp,4
100016a0:	f800283a 	ret

100016a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
100016a4:	defff604 	addi	sp,sp,-40
100016a8:	dfc00915 	stw	ra,36(sp)
100016ac:	df000815 	stw	fp,32(sp)
100016b0:	df000804 	addi	fp,sp,32
100016b4:	e13ffd15 	stw	r4,-12(fp)
100016b8:	e17ffe15 	stw	r5,-8(fp)
100016bc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
100016c0:	00bfffc4 	movi	r2,-1
100016c4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
100016c8:	00bffb44 	movi	r2,-19
100016cc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
100016d0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
100016d4:	d1600404 	addi	r5,gp,-32752
100016d8:	e13ffd17 	ldw	r4,-12(fp)
100016dc:	00018800 	call	10001880 <alt_find_dev>
100016e0:	e0bff815 	stw	r2,-32(fp)
100016e4:	e0bff817 	ldw	r2,-32(fp)
100016e8:	1000051e 	bne	r2,zero,10001700 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
100016ec:	e13ffd17 	ldw	r4,-12(fp)
100016f0:	00019100 	call	10001910 <alt_find_file>
100016f4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
100016f8:	00800044 	movi	r2,1
100016fc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10001700:	e0bff817 	ldw	r2,-32(fp)
10001704:	10002926 	beq	r2,zero,100017ac <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
10001708:	e13ff817 	ldw	r4,-32(fp)
1000170c:	0001a180 	call	10001a18 <alt_get_fd>
10001710:	e0bff915 	stw	r2,-28(fp)
10001714:	e0bff917 	ldw	r2,-28(fp)
10001718:	1000030e 	bge	r2,zero,10001728 <open+0x84>
    {
      status = index;
1000171c:	e0bff917 	ldw	r2,-28(fp)
10001720:	e0bffa15 	stw	r2,-24(fp)
10001724:	00002306 	br	100017b4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
10001728:	e0bff917 	ldw	r2,-28(fp)
1000172c:	10c00324 	muli	r3,r2,12
10001730:	00840034 	movhi	r2,4096
10001734:	10875504 	addi	r2,r2,7508
10001738:	1885883a 	add	r2,r3,r2
1000173c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10001740:	e0fffe17 	ldw	r3,-8(fp)
10001744:	00900034 	movhi	r2,16384
10001748:	10bfffc4 	addi	r2,r2,-1
1000174c:	1886703a 	and	r3,r3,r2
10001750:	e0bffc17 	ldw	r2,-16(fp)
10001754:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10001758:	e0bffb17 	ldw	r2,-20(fp)
1000175c:	1000051e 	bne	r2,zero,10001774 <open+0xd0>
10001760:	e13ffc17 	ldw	r4,-16(fp)
10001764:	00015e00 	call	100015e0 <alt_file_locked>
10001768:	e0bffa15 	stw	r2,-24(fp)
1000176c:	e0bffa17 	ldw	r2,-24(fp)
10001770:	10001016 	blt	r2,zero,100017b4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10001774:	e0bff817 	ldw	r2,-32(fp)
10001778:	10800317 	ldw	r2,12(r2)
1000177c:	10000826 	beq	r2,zero,100017a0 <open+0xfc>
10001780:	e0bff817 	ldw	r2,-32(fp)
10001784:	10800317 	ldw	r2,12(r2)
10001788:	e1ffff17 	ldw	r7,-4(fp)
1000178c:	e1bffe17 	ldw	r6,-8(fp)
10001790:	e17ffd17 	ldw	r5,-12(fp)
10001794:	e13ffc17 	ldw	r4,-16(fp)
10001798:	103ee83a 	callr	r2
1000179c:	00000106 	br	100017a4 <open+0x100>
100017a0:	0005883a 	mov	r2,zero
100017a4:	e0bffa15 	stw	r2,-24(fp)
100017a8:	00000206 	br	100017b4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
100017ac:	00bffb44 	movi	r2,-19
100017b0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
100017b4:	e0bffa17 	ldw	r2,-24(fp)
100017b8:	1000090e 	bge	r2,zero,100017e0 <open+0x13c>
  {
    alt_release_fd (index);  
100017bc:	e13ff917 	ldw	r4,-28(fp)
100017c0:	00017f80 	call	100017f8 <alt_release_fd>
    ALT_ERRNO = -status;
100017c4:	00015a40 	call	100015a4 <alt_get_errno>
100017c8:	1007883a 	mov	r3,r2
100017cc:	e0bffa17 	ldw	r2,-24(fp)
100017d0:	0085c83a 	sub	r2,zero,r2
100017d4:	18800015 	stw	r2,0(r3)
    return -1;
100017d8:	00bfffc4 	movi	r2,-1
100017dc:	00000106 	br	100017e4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
100017e0:	e0bff917 	ldw	r2,-28(fp)
}
100017e4:	e037883a 	mov	sp,fp
100017e8:	dfc00117 	ldw	ra,4(sp)
100017ec:	df000017 	ldw	fp,0(sp)
100017f0:	dec00204 	addi	sp,sp,8
100017f4:	f800283a 	ret

100017f8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
100017f8:	defffe04 	addi	sp,sp,-8
100017fc:	df000115 	stw	fp,4(sp)
10001800:	df000104 	addi	fp,sp,4
10001804:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
10001808:	e0bfff17 	ldw	r2,-4(fp)
1000180c:	108000d0 	cmplti	r2,r2,3
10001810:	10000d1e 	bne	r2,zero,10001848 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
10001814:	00840034 	movhi	r2,4096
10001818:	10875504 	addi	r2,r2,7508
1000181c:	e0ffff17 	ldw	r3,-4(fp)
10001820:	18c00324 	muli	r3,r3,12
10001824:	10c5883a 	add	r2,r2,r3
10001828:	10800204 	addi	r2,r2,8
1000182c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10001830:	00840034 	movhi	r2,4096
10001834:	10875504 	addi	r2,r2,7508
10001838:	e0ffff17 	ldw	r3,-4(fp)
1000183c:	18c00324 	muli	r3,r3,12
10001840:	10c5883a 	add	r2,r2,r3
10001844:	10000015 	stw	zero,0(r2)
  }
}
10001848:	0001883a 	nop
1000184c:	e037883a 	mov	sp,fp
10001850:	df000017 	ldw	fp,0(sp)
10001854:	dec00104 	addi	sp,sp,4
10001858:	f800283a 	ret

1000185c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1000185c:	deffff04 	addi	sp,sp,-4
10001860:	df000015 	stw	fp,0(sp)
10001864:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10001868:	000170fa 	wrctl	ienable,zero
}
1000186c:	0001883a 	nop
10001870:	e037883a 	mov	sp,fp
10001874:	df000017 	ldw	fp,0(sp)
10001878:	dec00104 	addi	sp,sp,4
1000187c:	f800283a 	ret

10001880 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10001880:	defffa04 	addi	sp,sp,-24
10001884:	dfc00515 	stw	ra,20(sp)
10001888:	df000415 	stw	fp,16(sp)
1000188c:	df000404 	addi	fp,sp,16
10001890:	e13ffe15 	stw	r4,-8(fp)
10001894:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10001898:	e0bfff17 	ldw	r2,-4(fp)
1000189c:	10800017 	ldw	r2,0(r2)
100018a0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
100018a4:	e13ffe17 	ldw	r4,-8(fp)
100018a8:	000039c0 	call	1000039c <strlen>
100018ac:	10800044 	addi	r2,r2,1
100018b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100018b4:	00000d06 	br	100018ec <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
100018b8:	e0bffc17 	ldw	r2,-16(fp)
100018bc:	10800217 	ldw	r2,8(r2)
100018c0:	e0fffd17 	ldw	r3,-12(fp)
100018c4:	180d883a 	mov	r6,r3
100018c8:	e17ffe17 	ldw	r5,-8(fp)
100018cc:	1009883a 	mov	r4,r2
100018d0:	0001b4c0 	call	10001b4c <memcmp>
100018d4:	1000021e 	bne	r2,zero,100018e0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
100018d8:	e0bffc17 	ldw	r2,-16(fp)
100018dc:	00000706 	br	100018fc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
100018e0:	e0bffc17 	ldw	r2,-16(fp)
100018e4:	10800017 	ldw	r2,0(r2)
100018e8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100018ec:	e0fffc17 	ldw	r3,-16(fp)
100018f0:	e0bfff17 	ldw	r2,-4(fp)
100018f4:	18bff01e 	bne	r3,r2,100018b8 <__alt_mem_sdram_1+0xef8018b8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
100018f8:	0005883a 	mov	r2,zero
}
100018fc:	e037883a 	mov	sp,fp
10001900:	dfc00117 	ldw	ra,4(sp)
10001904:	df000017 	ldw	fp,0(sp)
10001908:	dec00204 	addi	sp,sp,8
1000190c:	f800283a 	ret

10001910 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10001910:	defffb04 	addi	sp,sp,-20
10001914:	dfc00415 	stw	ra,16(sp)
10001918:	df000315 	stw	fp,12(sp)
1000191c:	df000304 	addi	fp,sp,12
10001920:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10001924:	d0a00217 	ldw	r2,-32760(gp)
10001928:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000192c:	00003106 	br	100019f4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10001930:	e0bffd17 	ldw	r2,-12(fp)
10001934:	10800217 	ldw	r2,8(r2)
10001938:	1009883a 	mov	r4,r2
1000193c:	000039c0 	call	1000039c <strlen>
10001940:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10001944:	e0bffd17 	ldw	r2,-12(fp)
10001948:	10c00217 	ldw	r3,8(r2)
1000194c:	e0bffe17 	ldw	r2,-8(fp)
10001950:	10bfffc4 	addi	r2,r2,-1
10001954:	1885883a 	add	r2,r3,r2
10001958:	10800003 	ldbu	r2,0(r2)
1000195c:	10803fcc 	andi	r2,r2,255
10001960:	1080201c 	xori	r2,r2,128
10001964:	10bfe004 	addi	r2,r2,-128
10001968:	10800bd8 	cmpnei	r2,r2,47
1000196c:	1000031e 	bne	r2,zero,1000197c <alt_find_file+0x6c>
    {
      len -= 1;
10001970:	e0bffe17 	ldw	r2,-8(fp)
10001974:	10bfffc4 	addi	r2,r2,-1
10001978:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000197c:	e0bffe17 	ldw	r2,-8(fp)
10001980:	e0ffff17 	ldw	r3,-4(fp)
10001984:	1885883a 	add	r2,r3,r2
10001988:	10800003 	ldbu	r2,0(r2)
1000198c:	10803fcc 	andi	r2,r2,255
10001990:	1080201c 	xori	r2,r2,128
10001994:	10bfe004 	addi	r2,r2,-128
10001998:	10800be0 	cmpeqi	r2,r2,47
1000199c:	1000081e 	bne	r2,zero,100019c0 <alt_find_file+0xb0>
100019a0:	e0bffe17 	ldw	r2,-8(fp)
100019a4:	e0ffff17 	ldw	r3,-4(fp)
100019a8:	1885883a 	add	r2,r3,r2
100019ac:	10800003 	ldbu	r2,0(r2)
100019b0:	10803fcc 	andi	r2,r2,255
100019b4:	1080201c 	xori	r2,r2,128
100019b8:	10bfe004 	addi	r2,r2,-128
100019bc:	10000a1e 	bne	r2,zero,100019e8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
100019c0:	e0bffd17 	ldw	r2,-12(fp)
100019c4:	10800217 	ldw	r2,8(r2)
100019c8:	e0fffe17 	ldw	r3,-8(fp)
100019cc:	180d883a 	mov	r6,r3
100019d0:	e17fff17 	ldw	r5,-4(fp)
100019d4:	1009883a 	mov	r4,r2
100019d8:	0001b4c0 	call	10001b4c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100019dc:	1000021e 	bne	r2,zero,100019e8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
100019e0:	e0bffd17 	ldw	r2,-12(fp)
100019e4:	00000706 	br	10001a04 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
100019e8:	e0bffd17 	ldw	r2,-12(fp)
100019ec:	10800017 	ldw	r2,0(r2)
100019f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100019f4:	e0fffd17 	ldw	r3,-12(fp)
100019f8:	d0a00204 	addi	r2,gp,-32760
100019fc:	18bfcc1e 	bne	r3,r2,10001930 <__alt_mem_sdram_1+0xef801930>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10001a00:	0005883a 	mov	r2,zero
}
10001a04:	e037883a 	mov	sp,fp
10001a08:	dfc00117 	ldw	ra,4(sp)
10001a0c:	df000017 	ldw	fp,0(sp)
10001a10:	dec00204 	addi	sp,sp,8
10001a14:	f800283a 	ret

10001a18 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10001a18:	defffc04 	addi	sp,sp,-16
10001a1c:	df000315 	stw	fp,12(sp)
10001a20:	df000304 	addi	fp,sp,12
10001a24:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
10001a28:	00bffa04 	movi	r2,-24
10001a2c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10001a30:	e03ffd15 	stw	zero,-12(fp)
10001a34:	00001906 	br	10001a9c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
10001a38:	00840034 	movhi	r2,4096
10001a3c:	10875504 	addi	r2,r2,7508
10001a40:	e0fffd17 	ldw	r3,-12(fp)
10001a44:	18c00324 	muli	r3,r3,12
10001a48:	10c5883a 	add	r2,r2,r3
10001a4c:	10800017 	ldw	r2,0(r2)
10001a50:	10000f1e 	bne	r2,zero,10001a90 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
10001a54:	00840034 	movhi	r2,4096
10001a58:	10875504 	addi	r2,r2,7508
10001a5c:	e0fffd17 	ldw	r3,-12(fp)
10001a60:	18c00324 	muli	r3,r3,12
10001a64:	10c5883a 	add	r2,r2,r3
10001a68:	e0ffff17 	ldw	r3,-4(fp)
10001a6c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10001a70:	d0e00617 	ldw	r3,-32744(gp)
10001a74:	e0bffd17 	ldw	r2,-12(fp)
10001a78:	1880020e 	bge	r3,r2,10001a84 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
10001a7c:	e0bffd17 	ldw	r2,-12(fp)
10001a80:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
10001a84:	e0bffd17 	ldw	r2,-12(fp)
10001a88:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10001a8c:	00000606 	br	10001aa8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10001a90:	e0bffd17 	ldw	r2,-12(fp)
10001a94:	10800044 	addi	r2,r2,1
10001a98:	e0bffd15 	stw	r2,-12(fp)
10001a9c:	e0bffd17 	ldw	r2,-12(fp)
10001aa0:	10800810 	cmplti	r2,r2,32
10001aa4:	103fe41e 	bne	r2,zero,10001a38 <__alt_mem_sdram_1+0xef801a38>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10001aa8:	e0bffe17 	ldw	r2,-8(fp)
}
10001aac:	e037883a 	mov	sp,fp
10001ab0:	df000017 	ldw	fp,0(sp)
10001ab4:	dec00104 	addi	sp,sp,4
10001ab8:	f800283a 	ret

10001abc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
10001abc:	defffb04 	addi	sp,sp,-20
10001ac0:	df000415 	stw	fp,16(sp)
10001ac4:	df000404 	addi	fp,sp,16
10001ac8:	e13ffe15 	stw	r4,-8(fp)
10001acc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
10001ad0:	e0bfff17 	ldw	r2,-4(fp)
10001ad4:	10840070 	cmpltui	r2,r2,4097
10001ad8:	1000021e 	bne	r2,zero,10001ae4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
10001adc:	00840004 	movi	r2,4096
10001ae0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
10001ae4:	e0fffe17 	ldw	r3,-8(fp)
10001ae8:	e0bfff17 	ldw	r2,-4(fp)
10001aec:	1885883a 	add	r2,r3,r2
10001af0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10001af4:	e0bffe17 	ldw	r2,-8(fp)
10001af8:	e0bffc15 	stw	r2,-16(fp)
10001afc:	00000506 	br	10001b14 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
10001b00:	e0bffc17 	ldw	r2,-16(fp)
10001b04:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10001b08:	e0bffc17 	ldw	r2,-16(fp)
10001b0c:	10800804 	addi	r2,r2,32
10001b10:	e0bffc15 	stw	r2,-16(fp)
10001b14:	e0fffc17 	ldw	r3,-16(fp)
10001b18:	e0bffd17 	ldw	r2,-12(fp)
10001b1c:	18bff836 	bltu	r3,r2,10001b00 <__alt_mem_sdram_1+0xef801b00>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
10001b20:	e0bffe17 	ldw	r2,-8(fp)
10001b24:	108007cc 	andi	r2,r2,31
10001b28:	10000226 	beq	r2,zero,10001b34 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
10001b2c:	e0bffc17 	ldw	r2,-16(fp)
10001b30:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
10001b34:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
10001b38:	0001883a 	nop
10001b3c:	e037883a 	mov	sp,fp
10001b40:	df000017 	ldw	fp,0(sp)
10001b44:	dec00104 	addi	sp,sp,4
10001b48:	f800283a 	ret

10001b4c <memcmp>:
10001b4c:	218d883a 	add	r6,r4,r6
10001b50:	21800826 	beq	r4,r6,10001b74 <memcmp+0x28>
10001b54:	20800003 	ldbu	r2,0(r4)
10001b58:	28c00003 	ldbu	r3,0(r5)
10001b5c:	10c00226 	beq	r2,r3,10001b68 <memcmp+0x1c>
10001b60:	10c5c83a 	sub	r2,r2,r3
10001b64:	f800283a 	ret
10001b68:	21000044 	addi	r4,r4,1
10001b6c:	29400044 	addi	r5,r5,1
10001b70:	003ff706 	br	10001b50 <__alt_mem_sdram_1+0xef801b50>
10001b74:	0005883a 	mov	r2,zero
10001b78:	f800283a 	ret
